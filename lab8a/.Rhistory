plot(cars)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
Phi.m = function(m,xseq){
# xseq can be either a scalar or a vector
X = rnorm(m)
Phi.m.x = sapply(xseq,function(x){mean(X<x)})
return(Phi.m.x)
}
m = c(5,50,500)
xseq = seq(-4,4,by=0.01)
plot(0,xlim=c(-4,4),ylim=c(0,1),xlab="x",ylab="Phi.m(x)",
main="Empirical CDF", type='n')
for (i in 1:length(m)){
par(new=T)
plot(xseq,Phi.m(m[i],xseq),col=i,axes=F,type="l",xlim=c(-4,4),
ylim=c(0,1),xlab="",ylab="")
}
lines(xseq,pnorm(xseq,mean=0,sd=1),col="blue",lty=3,lwd=2)
legend("topleft",legend=c(paste(m,'points'),'Normal cdf'),
col=c(1:length(m),'blue'),lty=c(1,1,1,3))
n = 100
lambda = 3
x = -(1/lambda)*log(runif(n))
hist(x, prob = TRUE)
y = seq(0,10,length = 1000)
lines(y,dexp(y,3))
n = 10
k = 5
lambda = 3
x = matrix(-(1/lambda)*log(runif(n*k)), ncol=k)
g = apply(x, 1, sum)
## Function to implement the inversion sampling
## for binomial distribution
binomial <- function(n, num_trials, prop)
{
## Generate n uninform numbers
z <- runif(n)
## Obtain P(X=0), P(X=1), ..., P(X=num_trails)
tmp = seq(0, num_trials)
p <- choose(num_trials, tmp)* prop^tmp * (1-prop)^(num_trials-tmp)
## Intialize the binomial numbers
x <- rep(0, n)
for (i in seq(1, n))
{
s <- 0  ## Initialize the sum
k <- -1  ## Initialize
## While loop
## Finding the smallest k such that p[1]+...p[k] > z[i]
while (s < z[i])
{
k <- k + 1
s <- s + p[k+1]
}
x[i] <- k
}
return(x)
}
## Call binomial generator
x <- binomial(n=1000, num_trials=10, prop=0.4)
hist(x)
n = 100
lambda = 3
x = -(1/lambda)*log(runif(n))
hist(x, prob = TRUE, ylim = c(0,3))
y = seq(0,10,length = 1000)
lines(y,dexp(y,3))
knitr::opts_chunk$set(echo = TRUE)
Phi.m = function(m,xseq){
# xseq can be either a scalar or a vector
X = rnorm(m)
Phi.m.x = sapply(xseq,function(x){mean(X<x)})
return(Phi.m.x)
}
m = c(5,50,500)
xseq = seq(-4,4,by=0.01)
plot(0,xlim=c(-4,4),ylim=c(0,1),xlab="x",ylab="Phi.m(x)",
main="Empirical CDF", type='n')
for (i in 1:length(m)){
par(new=T)
plot(xseq,Phi.m(m[i],xseq),col=i,axes=F,type="l",xlim=c(-4,4),
ylim=c(0,1),xlab="",ylab="")
}
lines(xseq,pnorm(xseq,mean=0,sd=1),col="blue",lty=3,lwd=2)
legend("topleft",legend=c(paste(m,'points'),'Normal cdf'),
col=c(1:length(m),'blue'),lty=c(1,1,1,3))
n = 100
lambda = 3
x = -(1/lambda)*log(runif(n))
hist(x, prob = TRUE, ylim = c(0,3))
y = seq(0,10,length = 1000)
lines(y,dexp(y,3))
n = 10
k = 5
lambda = 3
x = matrix(-(1/lambda)*log(runif(n*k)), ncol=k)
(g = apply(x, 1, sum))
## Function to implement the inversion sampling
## for binomial distribution
binomial <- function(n, num_trials, prop)
{
## Generate n uninform numbers
z <- runif(n)
## Obtain P(X=0), P(X=1), ..., P(X=num_trails)
support = seq(0, num_trials)
p <- choose(num_trials, support)* prop^support * (1-prop)^(num_trials-support)
## Intialize the binomial numbers
x <- rep(0, n)
for (i in seq(1, n))
{
s <- 0  ## Initialize the sum
k <- -1  ## Initialize
## While loop
## Finding the smallest k such that p[1]+...p[k] > z[i]
while (s < z[i])
{
k <- k + 1
s <- s + p[k+1]
}
x[i] <- k
}
return(x)
}
## Call binomial generator
x <- binomial(n=1000, num_trials=10, prop=0.4)
hist(x)
## Function to implement the inversion sampling
## for binomial distribution
binomial <- function(n, num_trials, prop)
{
## Generate n uninform numbers
z <- runif(n)
## Obtain P(X=0), P(X=1), ..., P(X=num_trails)
support = seq(0, num_trials)
p <- choose(num_trials, support)* prop^support * (1-prop)^(num_trials-support)
## Intialize the binomial numbers
x <- rep(0, n)
for (i in seq(1, n))
{
s <- 0  ## Initialize the sum
k <- -1  ## Initialize
## While loop
## Finding the smallest k such that p[1]+...p[k] > z[i]
while (s < z[i])
{
k <- k + 1
s <- s + p[k+1]
}
x[i] <- k
}
return(x)
}
## Call binomial generator
x <- binomial(n=1000, num_trials=10, prop=0.4)
hist(x)
## Function to implement the inversion sampling
## for binomial distribution
binomial <- function(n, n_max, prop)
{
## Generate n uninform numbers
z <- runif(n)
## Obtain P(X=0), P(X=1), ..., P(X=num_trails)
support = seq(0, n_max)
p <- choose(n_max, support)* prop^support * (1-prop)^(n_max-support)
## Intialize the binomial numbers
x <- rep(0, n)
for (i in seq(1, n))
{
s <- 0  ## Initialize the sum
k <- -1  ## Initialize
## While loop
## Finding the smallest k such that p[1]+...p[k] > z[i]
while (s < z[i])
{
k <- k + 1
s <- s + p[k+1]
}
x[i] <- k
}
return(x)
}
## Call binomial generator
x <- binomial(n=1000, num_trials=10, prop=0.4)
## Function to implement the inversion sampling
## for binomial distribution
binomial <- function(n, n_max, prop)
{
## Generate n uninform numbers
z <- runif(n)
## Obtain P(X=0), P(X=1), ..., P(X=num_trails)
support = seq(0, n_max)
p <- choose(n_max, support)* prop^support * (1-prop)^(n_max-support)
## Intialize the binomial numbers
x <- rep(0, n)
for (i in seq(1, n))
{
s <- 0  ## Initialize the sum
k <- -1  ## Initialize
## While loop
## Finding the smallest k such that p[1]+...p[k] > z[i]
while (s < z[i])
{
k <- k + 1
s <- s + p[k+1]
}
x[i] <- k
}
return(x)
}
## Call binomial generator
x <- binomial(n=1000, n_max=10, prop=0.4)
hist(x)
hist(x, xlim = c(0, 10))
## Function to implement the inversion sampling
## for binomial distribution
binomial <- function(n, n_max, prop)
{
## Generate n uninform numbers
z <- runif(n)
## Obtain P(X=0), P(X=1), ..., P(X=num_trails)
k = seq(0, n_max)
p <- choose(n_max, k)* prop^k * (1-prop)^(n_max-k)
## Intialize the binomial numbers
x <- rep(0, n)
for (i in seq(1, n))
{
s <- 0  ## Initialize the sum
t <- -1  ## Initialize
## While loop
## Finding the smallest k such that p[1]+...p[t] > z[i]
while (s < z[i])
{
t <- t + 1
s <- s + p[t+1]
}
x[i] <- t
}
return(x)
}
## Call binomial generator
x <- binomial(n=1000, n_max=10, prop=0.4)
hist(x, xlim = c(0, 10))
x <- rbinom(n = 1000, size = 10, prob = 0.4)
hist(x, xlim = c(0, 10))
knitr::opts_chunk$set(echo = TRUE)
Phi.m = function(m,xseq){
# xseq can be either a scalar or a vector
X = rnorm(m)
Phi.m.x = sapply(xseq,function(x){mean(X<x)})
return(Phi.m.x)
}
m = c(5,50,500)
xseq = seq(-4,4,by=0.01)
plot(0,xlim=c(-4,4),ylim=c(0,1),xlab="x",ylab="Phi.m(x)",
main="Empirical CDF", type='n')
for (i in 1:length(m)){
par(new=T)
plot(xseq,Phi.m(m[i],xseq),col=i,axes=F,type="l",xlim=c(-4,4),
ylim=c(0,1),xlab="",ylab="")
}
lines(xseq,pnorm(xseq,mean=0,sd=1),col="blue",lty=3,lwd=2)
legend("topleft",legend=c(paste(m,'points'),'Normal cdf'),
col=c(1:length(m),'blue'),lty=c(1,1,1,3))
n = 100
lambda = 3
x = -(1/lambda)*log(runif(n))
hist(x, prob = TRUE, ylim = c(0,3))
y = seq(0,10,length = 1000)
lines(y,dexp(y,3))
n = 10
k = 5
lambda = 3
x = matrix(-(1/lambda)*log(runif(n*k)), ncol=k)
(g = apply(x, 1, sum))
## Function to implement the inversion sampling
## for binomial distribution
binomial <- function(n, n_max, prob)
{
## Generate n uninform numbers
z <- runif(n)
## Obtain P(X=0), P(X=1), ..., P(X=num_trails)
k = seq(0, n_max)
p <- choose(n_max, k)* prob^k * (1-prob)^(n_max-k)
## Intialize the binomial numbers
x <- rep(0, n)
for (i in seq(1, n))
{
s <- 0  ## Initialize the sum
t <- -1  ## Initialize
## While loop
## Finding the smallest k such that p[1]+...p[t] > z[i]
while (s < z[i])
{
t <- t + 1
s <- s + p[t+1]
}
x[i] <- t
}
return(x)
}
## Call binomial generator
x <- binomial(n=1000, n_max=10, prop=0.4)
knitr::opts_chunk$set(echo = TRUE)
Phi.m = function(m,xseq){
# xseq can be either a scalar or a vector
X = rnorm(m)
Phi.m.x = sapply(xseq,function(x){mean(X<x)})
return(Phi.m.x)
}
m = c(5,50,500)
xseq = seq(-4,4,by=0.01)
plot(0,xlim=c(-4,4),ylim=c(0,1),xlab="x",ylab="Phi.m(x)",
main="Empirical CDF", type='n')
for (i in 1:length(m)){
par(new=T)
plot(xseq,Phi.m(m[i],xseq),col=i,axes=F,type="l",xlim=c(-4,4),
ylim=c(0,1),xlab="",ylab="")
}
lines(xseq,pnorm(xseq,mean=0,sd=1),col="blue",lty=3,lwd=2)
legend("topleft",legend=c(paste(m,'points'),'Normal cdf'),
col=c(1:length(m),'blue'),lty=c(1,1,1,3))
n = 100
lambda = 3
x = -(1/lambda)*log(runif(n))
hist(x, prob = TRUE, ylim = c(0,3))
y = seq(0,10,length = 1000)
lines(y,dexp(y,3))
n = 10
k = 5
lambda = 3
x = matrix(-(1/lambda)*log(runif(n*k)), ncol=k)
(g = apply(x, 1, sum))
## Function to implement the inversion sampling
## for binomial distribution
binomial <- function(n, n_max, prob)
{
## Generate n uninform numbers
z <- runif(n)
## Obtain P(X=0), P(X=1), ..., P(X=num_trails)
k = seq(0, n_max)
p <- choose(n_max, k)* prob^k * (1-prob)^(n_max-k)
## Intialize the binomial numbers
x <- rep(0, n)
for (i in seq(1, n))
{
s <- 0  ## Initialize the sum
t <- -1  ## Initialize
## While loop
## Finding the smallest k such that p[1]+...p[t] > z[i]
while (s < z[i])
{
t <- t + 1
s <- s + p[t+1]
}
x[i] <- t
}
return(x)
}
## Call binomial generator
x <- binomial(n = 1000, n_max = 10, prob = 0.4)
hist(x, xlim = c(0, 10))
x <- rbinom(n = 1000, size = 10, prob = 0.4)
hist(x, xlim = c(0, 10))
