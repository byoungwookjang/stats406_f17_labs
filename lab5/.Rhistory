warnings()
warnings()
warnings()
warnings()
warnings()
warnings()
warnings()
warnings()
warnings()
plot(Dec1st$pickup_longitude,Dec1st$pickup_latitude,
xlim=c(-74.03,-73.77),ylim=c(40.61,40.91),pch='.',col=rgb(1,1,1,0.1))
par(bg="black")
plot(Dec1st$pickup_longitude,Dec1st$pickup_latitude,
xlim=c(-74.03,-73.77),ylim=c(40.61,40.91),pch='.',col=rgb(1,1,1,0.1))
par(bg="white")
plot(Dec1st$pickup_longitude,Dec1st$pickup_latitude,
xlim=c(-74.03,-73.77),ylim=c(40.61,40.91),pch='.',col=rgb(0,0,0,0.01))
par(margin(0,0,0,0))
par(margin(0,0,0,0))
par(margin=c(0,0,0,0))
par(mar=c(0,0,0,0))
plot(Dec1st$pickup_longitude,Dec1st$pickup_latitude,
xlim=c(-74.03,-73.77),ylim=c(40.61,40.91),pch='.',col=rgb(0,0,0,0.01))
par(mar=c(0,0,0,0))
plot(Dec1st$pickup_longitude,Dec1st$pickup_latitude,
xlim=c(-74.03,-73.77),ylim=c(40.61,40.91),pch='.',col=rgb(0,0,0,0.01))
Dec1st = read.csv(file = "~/Downloads/yellow_tripdata_2015-12.csv", nrows = 1000000)
tail(Dec1st)
summary(Dec1st$pickup_latitude)
Dec1st = Dec1st[Dec1st$pickup_latitude>0,]
summary(Dec1st$pickup_latitude)
plot(Dec1st$pickup_longitude,Dec1st$pickup_latitude,
xlim=c(-74.03,-73.77),ylim=c(40.61,40.91),pch='.',col=rgb(0,0,0,0.01))
par(mar=c(0,0,0,0))
par(mar=c(0,0,0,0))
plot(Dec1st$pickup_longitude,Dec1st$pickup_latitude,
xlim=c(-74.03,-73.77),ylim=c(40.61,40.91),pch='.',col=rgb(0,0,0,0.05))
Dec1st = read.csv(file = "~/Downloads/yellow_tripdata_2015-12.csv", nrows = 3000000)
tail(Dec1st)
summary(Dec1st$pickup_latitude)
Dec1st = Dec1st[Dec1st$pickup_latitude>0,]
par(mar=c(0,0,0,0))
plot(Dec1st$pickup_longitude,Dec1st$pickup_latitude,
xlim=c(-74.03,-73.77),ylim=c(40.61,40.91),pch='.',col=rgb(0,0,0,0.05))
######################################################
monthly = read.table(file = "~/Downloads/data_reports_monthly_indicators_yellow.csv",
header = T,sep = ",")
attributes(monthly)
head(monthly$Month.Year)
apply(monthly,2,class)
class(monthly$Trips.Per.Day)
colClasses = c("character","integer","integer","integer","integer","integer",
"numeric","numeric","numeric","numeric","numeric","numeric")
colNames = names(monthly)
monthly[,1] = as.Date(paste(c("01"),as.character(monthly[,1]),sep = ""),"%d%B-%y")
for(i in 2:(length(colNames)-1)){
monthly[,i] = as.numeric(gsub(",", "", monthly[,i]))
}
monthly[,length(colNames)] = as.numeric(gsub("%", "", monthly[,length(colNames)]))
#####################################################
attach(monthly)
### master plot
plot(monthly)
### A steady increase in the percentage paid with credit cards
plot(Month.Year,Percent.of.Trips.Paid.with.Credit.Card,type = 'l')
### Decline in trips per day from 2013, accelerating
plot(Month.Year, Trips.Per.Day, 'l',ylim = c(0,max(Trips.Per.Day)))
### Seems like hump shape, suspect jump in 2012, declining since 2014, accelerating
plot(Month.Year, Farebox.Per.Day, 'l',ylim = c(0,max(Farebox.Per.Day)))
### Found a price hike in Sep 2012, price rise on average by 17%.
# Another hike in 2015 increase fares by $0.30 for handicap accessibility
plot(Month.Year, Farebox.Per.Day/Trips.Per.Day, 'l')
colNames
plot(Month.Year, Avg.Hours.Per.Day.Per.Driver, 'l',ylim = c(0,max(Avg.Hours.Per.Day.Per.Driver)))
plot(Month.Year, Avg.Minutes.Per.Trip, 'l',ylim = c(0,max(Avg.Minutes.Per.Trip,na.rm = T)))
plot(Month.Year, Avg.Hours.Per.Day.Per.Medallion, 'l',ylim=c(0,max(Avg.Hours.Per.Day.Per.Medallion)))
plot(Month.Year, Avg.Hours.Per.Day.Per.Medallion*Unique.Medallions, 'l')
lines(Month.Year, Avg.Hours.Per.Day.Per.Driver*Unique.Drivers)
### Increase, then decrease in driver per medallion
plot(Month.Year, Unique.Drivers/Unique.Medallions, 'l',ylim=c(2,2.6))
plot(Month.Year, Unique.Medallions, 'l')
# Make clean
```
x = rnorm(100) * 100
M1 = 0
M2 = 0
for (i in 1:100) {
M2 = M2 + (i - 1) / i * (x[i] - M1) ^ 2
M1 = M1 + (x[i] - M1) / i
}
M1
M2
M2/99
M1
M2/99
mean(x)
var(x)
.Machine
format(.Machine)
noquote(format(.Machine))
x
y
plot(x)
x=1:5
x+1
x+numeric(0)
numeric(0)
numeric(2)
x=1:5;numeric(3)
x+numeric(3)
typeIIerrorNaive = c()
typeIIerrorFisher = c()
typeIIerrorEdgington = c()
typeIIerrorChisq = c() # bad
for(n in 10^(1:4)){
shift = -2/sqrt(n)
N = 10^7/n
d1 = matrix(rnorm(n*N),n,N)
z1 = pnorm(d1)
d2 = matrix(rnorm(n*N,shift),n,N)
z2 = pnorm(d2)
#plot(apply(d1, 2, sum),ylim = c(-10*sqrt(n),10*sqrt(n)))
#points(apply(d2, 2, sum),col=2)
#abline(h = -1.96*sqrt(n))
#abline(h = 1.96*sqrt(n))
typeIIerrorNaive = c(typeIIerrorNaive,
sum(apply(d2, 2, sum)>-1.65*sqrt(n)))
#sum(apply(log(z1), 2, sum)>-qchisq(0.95,2*n)/2)
#plot(apply(log(z1), 2, sum),ylim = c(-2*n,-n/8))
#points(apply(log(z2), 2, sum),col=2)
#abline(h = -qchisq(0.05,2*n)/2)
#abline(h = -qchisq(0.95,2*n)/2)
typeIIerrorFisher = c(typeIIerrorFisher,
sum(apply(log(z2), 2, sum)>-qchisq(0.95,2*n)/2))
#sum(apply(log(z1), 2, sum)>-qchisq(0.95,2*n)/2)
#plot(apply(z1, 2, sum),ylim = c(0, n))
#points(apply(z2, 2, sum),col=2)
#abline(h = qnorm(0.05,n/2,sqrt(n/12)))
#abline(h = qnorm(0.95,n/2,sqrt(n/12)))
typeIIerrorEdgington = c(typeIIerrorEdgington,
sum(apply(z2, 2, sum)>qnorm(0.05,n/2,sqrt(n/12))))
#sum(apply(z1, 2, sum)>qnorm(0.05,n/2,sqrt(n/12)))
#plot(apply(d1^2, 2, sum),ylim = c(n/2, 2*n))
#points(apply(d2^2, 2, sum),col=2)
#abline(h = qchisq(0.05,n))
#abline(h = qchisq(0.95,n))
typeIIerrorChisq = c(typeIIerrorChisq,
sum(apply(d2^2, 2, sum)<qchisq(0.95,n)))
#sum(apply(z1, 2, sum)>qnorm(0.05,n/2,sqrt(n/12)))
}
typeIIerrorNaive
typeIIerrorFisher
typeIIerrorEdgington
typeIIerrorChisq
rep(1,10)
#### From low to high dimensions ####
typeIIerrorNaive = c()
typeIIerrorFisher = c()
typeIIerrorEdgington = c()
typeIIerrorChisq = c() # bad
for(n in 10^(1:4)){
shift = -2/sqrt(n)
fraction = 1
N = 10^3
d1 = matrix(rnorm(n*N),n,N)
z1 = pnorm(d1)
d2 = d1 + c(rep(shift,n*fraction),rep(0,n-n*fraction))
z2 = pnorm(d2)
#plot(apply(d1, 2, sum),ylim = c(-10*sqrt(n),10*sqrt(n)))
#points(apply(d2, 2, sum),col=2)
#abline(h = -1.96*sqrt(n))
#abline(h = 1.96*sqrt(n))
typeIIerrorNaive = c(typeIIerrorNaive,
sum(apply(d2, 2, sum)>-1.65*sqrt(n)))
#sum(apply(log(z1), 2, sum)>-qchisq(0.95,2*n)/2)
#plot(apply(log(z1), 2, sum),ylim = c(-2*n,-n/8))
#points(apply(log(z2), 2, sum),col=2)
#abline(h = -qchisq(0.05,2*n)/2)
#abline(h = -qchisq(0.95,2*n)/2)
typeIIerrorFisher = c(typeIIerrorFisher,
sum(apply(log(z2), 2, sum)>-qchisq(0.95,2*n)/2))
#sum(apply(log(z1), 2, sum)>-qchisq(0.95,2*n)/2)
#plot(apply(z1, 2, sum),ylim = c(0, n))
#points(apply(z2, 2, sum),col=2)
#abline(h = qnorm(0.05,n/2,sqrt(n/12)))
#abline(h = qnorm(0.95,n/2,sqrt(n/12)))
typeIIerrorEdgington = c(typeIIerrorEdgington,
sum(apply(z2, 2, sum)>qnorm(0.05,n/2,sqrt(n/12))))
#sum(apply(z1, 2, sum)>qnorm(0.05,n/2,sqrt(n/12)))
#plot(apply(d1^2, 2, sum),ylim = c(n/2, 2*n))
#points(apply(d2^2, 2, sum),col=2)
#abline(h = qchisq(0.05,n))
#abline(h = qchisq(0.95,n))
typeIIerrorChisq = c(typeIIerrorChisq,
sum(apply(d2^2, 2, sum)<qchisq(0.95,n)))
#sum(apply(z1, 2, sum)>qnorm(0.05,n/2,sqrt(n/12)))
}
typeIIerrorNaive
typeIIerrorFisher
typeIIerrorEdgington
typeIIerrorChisq
#### From low to high dimensions ####
typeIIerrorNaive = c()
typeIIerrorFisher = c()
typeIIerrorEdgington = c()
typeIIerrorChisq = c() # bad
for(n in 10^(1:4)){
shift = -2/sqrt(n)
fraction = 1
N = 10^3
d1 = matrix(rnorm(n*N),n,N)
z1 = pnorm(d1)
d2 = d1 + c(rep(shift,n*fraction),rep(0,n-n*fraction))
z2 = pnorm(d2)
#plot(apply(d1, 2, sum),ylim = c(-10*sqrt(n),10*sqrt(n)))
#points(apply(d2, 2, sum),col=2)
#abline(h = -1.96*sqrt(n))
#abline(h = 1.96*sqrt(n))
typeIIerrorNaive = c(typeIIerrorNaive,
sum(apply(d2, 2, sum)>-1.65*sqrt(n)))
#sum(apply(log(z1), 2, sum)>-qchisq(0.95,2*n)/2)
#plot(apply(log(z1), 2, sum),ylim = c(-2*n,-n/8))
#points(apply(log(z2), 2, sum),col=2)
#abline(h = -qchisq(0.05,2*n)/2)
#abline(h = -qchisq(0.95,2*n)/2)
typeIIerrorFisher = c(typeIIerrorFisher,
sum(apply(log(z2), 2, sum)>-qchisq(0.95,2*n)/2))
#sum(apply(log(z1), 2, sum)>-qchisq(0.95,2*n)/2)
#plot(apply(z1, 2, sum),ylim = c(0, n))
#points(apply(z2, 2, sum),col=2)
#abline(h = qnorm(0.05,n/2,sqrt(n/12)))
#abline(h = qnorm(0.95,n/2,sqrt(n/12)))
typeIIerrorEdgington = c(typeIIerrorEdgington,
sum(apply(z2, 2, sum)>qnorm(0.05,n/2,sqrt(n/12))))
#sum(apply(z1, 2, sum)>qnorm(0.05,n/2,sqrt(n/12)))
#plot(apply(d1^2, 2, sum),ylim = c(n/2, 2*n))
#points(apply(d2^2, 2, sum),col=2)
#abline(h = qchisq(0.05,n))
#abline(h = qchisq(0.95,n))
typeIIerrorChisq = c(typeIIerrorChisq,
sum(apply(d2^2, 2, sum)<qchisq(0.95,n)))
#sum(apply(z1, 2, sum)>qnorm(0.05,n/2,sqrt(n/12)))
}
typeIIerrorNaive
typeIIerrorFisher
typeIIerrorEdgington
typeIIerrorChisq
plot(apply(d1, 2, sum),ylim = c(-10*sqrt(n),10*sqrt(n)))
points(apply(d2, 2, sum),col=2)
abline(h = -1.96*sqrt(n))
abline(h = 1.96*sqrt(n))
for(n in 10^(1:4)){
shift = -2/sqrt(n)
fraction = 0.5
N = 10^3
d1 = matrix(rnorm(n*N),n,N)
z1 = pnorm(d1)
d2 = d1 + c(rep(shift,n*fraction),rep(0,n-n*fraction))
z2 = pnorm(d2)
#plot(apply(d1, 2, sum),ylim = c(-10*sqrt(n),10*sqrt(n)))
#points(apply(d2, 2, sum),col=2)
#abline(h = -1.96*sqrt(n))
#abline(h = 1.96*sqrt(n))
typeIIerrorNaive = c(typeIIerrorNaive,
sum(apply(d2, 2, sum)>-1.65*sqrt(n)))
#sum(apply(log(z1), 2, sum)>-qchisq(0.95,2*n)/2)
#plot(apply(log(z1), 2, sum),ylim = c(-2*n,-n/8))
#points(apply(log(z2), 2, sum),col=2)
#abline(h = -qchisq(0.05,2*n)/2)
#abline(h = -qchisq(0.95,2*n)/2)
typeIIerrorFisher = c(typeIIerrorFisher,
sum(apply(log(z2), 2, sum)>-qchisq(0.95,2*n)/2))
#sum(apply(log(z1), 2, sum)>-qchisq(0.95,2*n)/2)
#plot(apply(z1, 2, sum),ylim = c(0, n))
#points(apply(z2, 2, sum),col=2)
#abline(h = qnorm(0.05,n/2,sqrt(n/12)))
#abline(h = qnorm(0.95,n/2,sqrt(n/12)))
typeIIerrorEdgington = c(typeIIerrorEdgington,
sum(apply(z2, 2, sum)>qnorm(0.05,n/2,sqrt(n/12))))
#sum(apply(z1, 2, sum)>qnorm(0.05,n/2,sqrt(n/12)))
#plot(apply(d1^2, 2, sum),ylim = c(n/2, 2*n))
#points(apply(d2^2, 2, sum),col=2)
#abline(h = qchisq(0.05,n))
#abline(h = qchisq(0.95,n))
typeIIerrorChisq = c(typeIIerrorChisq,
sum(apply(d2^2, 2, sum)<qchisq(0.95,n)))
#sum(apply(z1, 2, sum)>qnorm(0.05,n/2,sqrt(n/12)))
}
typeIIerrorNaive
typeIIerrorFisher
typeIIerrorEdgington
typeIIerrorChisq
plot(apply(d1, 2, sum),ylim = c(-10*sqrt(n),10*sqrt(n)))
points(apply(d2, 2, sum),col=2)
abline(h = -1.96*sqrt(n))
abline(h = 1.96*sqrt(n))
plot(apply(log(z1), 2, sum),ylim = c(-2*n,-n/8))
points(apply(log(z2), 2, sum),col=2)
#plot(apply(log(z1), 2, sum),ylim = c(-1.25n,-n/4))
plot(apply(log(z1), 2, sum),ylim = c(-1.25n,-n/4))
plot(apply(log(z1), 2, sum),ylim = c(-1.25*n,-n/4))
points(apply(log(z2), 2, sum),col=2)
#### From low to high dimensions ####
typeIIerrorNaive = c()
typeIIerrorFisher = c()
typeIIerrorEdgington = c()
typeIIerrorChisq = c() # bad
for(n in 10^(1:4)){
shift = -2/sqrt(n)
fraction = 0.7
N = 10^3
d1 = matrix(rnorm(n*N),n,N)
z1 = pnorm(d1)
d2 = d1 + c(rep(shift,n*fraction),rep(0,n-n*fraction))
z2 = pnorm(d2)
#plot(apply(d1, 2, sum),ylim = c(-10*sqrt(n),10*sqrt(n)))
#points(apply(d2, 2, sum),col=2)
#abline(h = -1.96*sqrt(n))
#abline(h = 1.96*sqrt(n))
typeIIerrorNaive = c(typeIIerrorNaive,
sum(apply(d2, 2, sum)>-1.65*sqrt(n)))
#sum(apply(log(z1), 2, sum)>-qchisq(0.95,2*n)/2)
#plot(apply(log(z1), 2, sum),ylim = c(-1.25*n,-n/4))
#points(apply(log(z2), 2, sum),col=2)
#abline(h = -qchisq(0.05,2*n)/2)
#abline(h = -qchisq(0.95,2*n)/2)
typeIIerrorFisher = c(typeIIerrorFisher,
sum(apply(log(z2), 2, sum)>-qchisq(0.95,2*n)/2))
#sum(apply(log(z1), 2, sum)>-qchisq(0.95,2*n)/2)
#plot(apply(z1, 2, sum),ylim = c(0, n))
#points(apply(z2, 2, sum),col=2)
#abline(h = qnorm(0.05,n/2,sqrt(n/12)))
#abline(h = qnorm(0.95,n/2,sqrt(n/12)))
typeIIerrorEdgington = c(typeIIerrorEdgington,
sum(apply(z2, 2, sum)>qnorm(0.05,n/2,sqrt(n/12))))
#sum(apply(z1, 2, sum)>qnorm(0.05,n/2,sqrt(n/12)))
#plot(apply(d1^2, 2, sum),ylim = c(n/2, 2*n))
#points(apply(d2^2, 2, sum),col=2)
#abline(h = qchisq(0.05,n))
#abline(h = qchisq(0.95,n))
typeIIerrorChisq = c(typeIIerrorChisq,
sum(apply(d2^2, 2, sum)<qchisq(0.95,n)))
#sum(apply(z1, 2, sum)>qnorm(0.05,n/2,sqrt(n/12)))
}
typeIIerrorNaive
typeIIerrorFisher
typeIIerrorEdgington
typeIIerrorChisq
for(n in 10^(1:4)){
shift = -2/sqrt(n)
fraction = 0.8
N = 10^3
d1 = matrix(rnorm(n*N),n,N)
z1 = pnorm(d1)
d2 = d1 + c(rep(shift,n*fraction),rep(0,n-n*fraction))
z2 = pnorm(d2)
#plot(apply(d1, 2, sum),ylim = c(-10*sqrt(n),10*sqrt(n)))
#points(apply(d2, 2, sum),col=2)
#abline(h = -1.96*sqrt(n))
#abline(h = 1.96*sqrt(n))
typeIIerrorNaive = c(typeIIerrorNaive,
sum(apply(d2, 2, sum)>-1.65*sqrt(n)))
#sum(apply(log(z1), 2, sum)>-qchisq(0.95,2*n)/2)
#plot(apply(log(z1), 2, sum),ylim = c(-1.25*n,-n/4))
#points(apply(log(z2), 2, sum),col=2)
#abline(h = -qchisq(0.05,2*n)/2)
#abline(h = -qchisq(0.95,2*n)/2)
typeIIerrorFisher = c(typeIIerrorFisher,
sum(apply(log(z2), 2, sum)>-qchisq(0.95,2*n)/2))
#sum(apply(log(z1), 2, sum)>-qchisq(0.95,2*n)/2)
#plot(apply(z1, 2, sum),ylim = c(0, n))
#points(apply(z2, 2, sum),col=2)
#abline(h = qnorm(0.05,n/2,sqrt(n/12)))
#abline(h = qnorm(0.95,n/2,sqrt(n/12)))
typeIIerrorEdgington = c(typeIIerrorEdgington,
sum(apply(z2, 2, sum)>qnorm(0.05,n/2,sqrt(n/12))))
#sum(apply(z1, 2, sum)>qnorm(0.05,n/2,sqrt(n/12)))
#plot(apply(d1^2, 2, sum),ylim = c(n/2, 2*n))
#points(apply(d2^2, 2, sum),col=2)
#abline(h = qchisq(0.05,n))
#abline(h = qchisq(0.95,n))
typeIIerrorChisq = c(typeIIerrorChisq,
sum(apply(d2^2, 2, sum)<qchisq(0.95,n)))
#sum(apply(z1, 2, sum)>qnorm(0.05,n/2,sqrt(n/12)))
}
typeIIerrorNaive
typeIIerrorFisher
typeIIerrorEdgington
typeIIerrorChisq
#### From low to high dimensions ####
typeIIerrorNaive = c()
typeIIerrorFisher = c()
typeIIerrorEdgington = c()
typeIIerrorChisq = c() # bad
for(n in 10^(1:4)){
shift = -2/sqrt(n)
fraction = 0.9
N = 10^3
d1 = matrix(rnorm(n*N),n,N)
z1 = pnorm(d1)
d2 = d1 + c(rep(shift,n*fraction),rep(0,n-n*fraction))
z2 = pnorm(d2)
#plot(apply(d1, 2, sum),ylim = c(-10*sqrt(n),10*sqrt(n)))
#points(apply(d2, 2, sum),col=2)
#abline(h = -1.96*sqrt(n))
#abline(h = 1.96*sqrt(n))
typeIIerrorNaive = c(typeIIerrorNaive,
sum(apply(d2, 2, sum)>-1.65*sqrt(n)))
#sum(apply(log(z1), 2, sum)>-qchisq(0.95,2*n)/2)
#plot(apply(log(z1), 2, sum),ylim = c(-1.25*n,-n/4))
#points(apply(log(z2), 2, sum),col=2)
#abline(h = -qchisq(0.05,2*n)/2)
#abline(h = -qchisq(0.95,2*n)/2)
typeIIerrorFisher = c(typeIIerrorFisher,
sum(apply(log(z2), 2, sum)>-qchisq(0.95,2*n)/2))
#sum(apply(log(z1), 2, sum)>-qchisq(0.95,2*n)/2)
#plot(apply(z1, 2, sum),ylim = c(0, n))
#points(apply(z2, 2, sum),col=2)
#abline(h = qnorm(0.05,n/2,sqrt(n/12)))
#abline(h = qnorm(0.95,n/2,sqrt(n/12)))
typeIIerrorEdgington = c(typeIIerrorEdgington,
sum(apply(z2, 2, sum)>qnorm(0.05,n/2,sqrt(n/12))))
#sum(apply(z1, 2, sum)>qnorm(0.05,n/2,sqrt(n/12)))
#plot(apply(d1^2, 2, sum),ylim = c(n/2, 2*n))
#points(apply(d2^2, 2, sum),col=2)
#abline(h = qchisq(0.05,n))
#abline(h = qchisq(0.95,n))
typeIIerrorChisq = c(typeIIerrorChisq,
sum(apply(d2^2, 2, sum)<qchisq(0.95,n)))
#sum(apply(z1, 2, sum)>qnorm(0.05,n/2,sqrt(n/12)))
}
typeIIerrorNaive
typeIIerrorFisher
typeIIerrorEdgington
typeIIerrorChisq
!require(XML)
setwd("~/Teaching/Stats406/R_scripts/lab5/")
doc = xmlTreeParse("studentdata.xml");
root = xmlRoot(doc);
root
student1 = root [[1]];
student1
xmlValue(student1)
xmlValue(root [[4]], recursive =FALSE)
xmlValue(student1, recursive = FALSE)
xmlValue(student1)
xmlValue(root[[4]], recursive = FALSE)
class(root[[4]])
class(student1)
xmlValue(root[[4]], recursive = T)
list.files (pattern="*.xml")
root
student1
xmlAttrs(student1)
if(!require(XML)){
install.packages("XML", dep=TRUE);
require(XML);
}
doc = xmlTreeParse('studentdata.xml');
root = xmlRoot(doc);
## Get the number of children of the root node
n = xmlSize(root);
n
student1 = root[[1]]
print(student1)
print(xmlName(student1))
print(xmlAttrs(student1))
student1.attr = c();
student1.attr[1] = xmlGetAttr(student1, "SocialID", NA);
student1.attr[1] = xmlGetAttr(student1, "SocialID", NA);
student1.attr[2] = xmlGetAttr(student1, "SchoolID", NA);
student1.attr[3] = xmlGetAttr(student1, "OfficeLocation", NA);
print( student1.attr );
print(student1[[1]])
student1
print(xmlValue(student1[[1]]))
print(xmlValue(student1[["name"]]))
xmlValue(student1
)
print(xmlSApply(student1, xmlValue))
xmlSApply(X = root,xmlValue)
?xmlSApply
student4 = root[[4]]
student4
print(xmlValue(student4, recursive=FALSE))
print(xmlChildren(student4))
print(xmlChildren(student4)$text)
QueriedTable = t(as.data.frame(xmlSApply(
root,
function(x) list(
SchoolID = as.integer( xmlGetAttr(x, "SchoolID") ),
Name     = xmlValue(x[["name"]]),
Major    = xmlValue(x[["major"]]),
Minor    = xmlValue(x[["minor"]]),
Hobby    = xmlValue(x[["hobby"]])
)
)
))
print(QueriedTable)
extractInfo <- function(x) {
list(
SchoolID = as.integer(xmlGetAttr(x, "SchoolID")),
Name     = xmlValue(x[["name"]]),
Major    = xmlValue(x[["major"]]),
Minor    = xmlValue(x[["minor"]]),
Hobby    = xmlValue(x[["hobby"]])
)
}
QueriedTable = t(as.data.frame(xmlSApply(root,extractInfo)))
print(QueriedTable)
xmlSApply(root,extractInfo)
class(xmlSApply(root,extractInfo))
