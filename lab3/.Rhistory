#abline(h = qchisq(0.95,n))
typeIIerrorChisq = c(typeIIerrorChisq,
sum(apply(d2^2, 2, sum)<qchisq(0.95,n)))
#sum(apply(z1, 2, sum)>qnorm(0.05,n/2,sqrt(n/12)))
}
typeIIerrorNaive
typeIIerrorFisher
typeIIerrorEdgington
typeIIerrorChisq
#### From low to high dimensions ####
typeIIerrorNaive = c()
typeIIerrorFisher = c()
typeIIerrorEdgington = c()
typeIIerrorChisq = c() # bad
for(n in 10^(1:4)){
shift = -2/sqrt(n)
fraction = 1
N = 10^3
d1 = matrix(rnorm(n*N),n,N)
z1 = pnorm(d1)
d2 = d1 + c(rep(shift,n*fraction),rep(0,n-n*fraction))
z2 = pnorm(d2)
#plot(apply(d1, 2, sum),ylim = c(-10*sqrt(n),10*sqrt(n)))
#points(apply(d2, 2, sum),col=2)
#abline(h = -1.96*sqrt(n))
#abline(h = 1.96*sqrt(n))
typeIIerrorNaive = c(typeIIerrorNaive,
sum(apply(d2, 2, sum)>-1.65*sqrt(n)))
#sum(apply(log(z1), 2, sum)>-qchisq(0.95,2*n)/2)
#plot(apply(log(z1), 2, sum),ylim = c(-2*n,-n/8))
#points(apply(log(z2), 2, sum),col=2)
#abline(h = -qchisq(0.05,2*n)/2)
#abline(h = -qchisq(0.95,2*n)/2)
typeIIerrorFisher = c(typeIIerrorFisher,
sum(apply(log(z2), 2, sum)>-qchisq(0.95,2*n)/2))
#sum(apply(log(z1), 2, sum)>-qchisq(0.95,2*n)/2)
#plot(apply(z1, 2, sum),ylim = c(0, n))
#points(apply(z2, 2, sum),col=2)
#abline(h = qnorm(0.05,n/2,sqrt(n/12)))
#abline(h = qnorm(0.95,n/2,sqrt(n/12)))
typeIIerrorEdgington = c(typeIIerrorEdgington,
sum(apply(z2, 2, sum)>qnorm(0.05,n/2,sqrt(n/12))))
#sum(apply(z1, 2, sum)>qnorm(0.05,n/2,sqrt(n/12)))
#plot(apply(d1^2, 2, sum),ylim = c(n/2, 2*n))
#points(apply(d2^2, 2, sum),col=2)
#abline(h = qchisq(0.05,n))
#abline(h = qchisq(0.95,n))
typeIIerrorChisq = c(typeIIerrorChisq,
sum(apply(d2^2, 2, sum)<qchisq(0.95,n)))
#sum(apply(z1, 2, sum)>qnorm(0.05,n/2,sqrt(n/12)))
}
typeIIerrorNaive
typeIIerrorFisher
typeIIerrorEdgington
typeIIerrorChisq
plot(apply(d1, 2, sum),ylim = c(-10*sqrt(n),10*sqrt(n)))
points(apply(d2, 2, sum),col=2)
abline(h = -1.96*sqrt(n))
abline(h = 1.96*sqrt(n))
for(n in 10^(1:4)){
shift = -2/sqrt(n)
fraction = 0.5
N = 10^3
d1 = matrix(rnorm(n*N),n,N)
z1 = pnorm(d1)
d2 = d1 + c(rep(shift,n*fraction),rep(0,n-n*fraction))
z2 = pnorm(d2)
#plot(apply(d1, 2, sum),ylim = c(-10*sqrt(n),10*sqrt(n)))
#points(apply(d2, 2, sum),col=2)
#abline(h = -1.96*sqrt(n))
#abline(h = 1.96*sqrt(n))
typeIIerrorNaive = c(typeIIerrorNaive,
sum(apply(d2, 2, sum)>-1.65*sqrt(n)))
#sum(apply(log(z1), 2, sum)>-qchisq(0.95,2*n)/2)
#plot(apply(log(z1), 2, sum),ylim = c(-2*n,-n/8))
#points(apply(log(z2), 2, sum),col=2)
#abline(h = -qchisq(0.05,2*n)/2)
#abline(h = -qchisq(0.95,2*n)/2)
typeIIerrorFisher = c(typeIIerrorFisher,
sum(apply(log(z2), 2, sum)>-qchisq(0.95,2*n)/2))
#sum(apply(log(z1), 2, sum)>-qchisq(0.95,2*n)/2)
#plot(apply(z1, 2, sum),ylim = c(0, n))
#points(apply(z2, 2, sum),col=2)
#abline(h = qnorm(0.05,n/2,sqrt(n/12)))
#abline(h = qnorm(0.95,n/2,sqrt(n/12)))
typeIIerrorEdgington = c(typeIIerrorEdgington,
sum(apply(z2, 2, sum)>qnorm(0.05,n/2,sqrt(n/12))))
#sum(apply(z1, 2, sum)>qnorm(0.05,n/2,sqrt(n/12)))
#plot(apply(d1^2, 2, sum),ylim = c(n/2, 2*n))
#points(apply(d2^2, 2, sum),col=2)
#abline(h = qchisq(0.05,n))
#abline(h = qchisq(0.95,n))
typeIIerrorChisq = c(typeIIerrorChisq,
sum(apply(d2^2, 2, sum)<qchisq(0.95,n)))
#sum(apply(z1, 2, sum)>qnorm(0.05,n/2,sqrt(n/12)))
}
typeIIerrorNaive
typeIIerrorFisher
typeIIerrorEdgington
typeIIerrorChisq
plot(apply(d1, 2, sum),ylim = c(-10*sqrt(n),10*sqrt(n)))
points(apply(d2, 2, sum),col=2)
abline(h = -1.96*sqrt(n))
abline(h = 1.96*sqrt(n))
plot(apply(log(z1), 2, sum),ylim = c(-2*n,-n/8))
points(apply(log(z2), 2, sum),col=2)
#plot(apply(log(z1), 2, sum),ylim = c(-1.25n,-n/4))
plot(apply(log(z1), 2, sum),ylim = c(-1.25n,-n/4))
plot(apply(log(z1), 2, sum),ylim = c(-1.25*n,-n/4))
points(apply(log(z2), 2, sum),col=2)
#### From low to high dimensions ####
typeIIerrorNaive = c()
typeIIerrorFisher = c()
typeIIerrorEdgington = c()
typeIIerrorChisq = c() # bad
for(n in 10^(1:4)){
shift = -2/sqrt(n)
fraction = 0.7
N = 10^3
d1 = matrix(rnorm(n*N),n,N)
z1 = pnorm(d1)
d2 = d1 + c(rep(shift,n*fraction),rep(0,n-n*fraction))
z2 = pnorm(d2)
#plot(apply(d1, 2, sum),ylim = c(-10*sqrt(n),10*sqrt(n)))
#points(apply(d2, 2, sum),col=2)
#abline(h = -1.96*sqrt(n))
#abline(h = 1.96*sqrt(n))
typeIIerrorNaive = c(typeIIerrorNaive,
sum(apply(d2, 2, sum)>-1.65*sqrt(n)))
#sum(apply(log(z1), 2, sum)>-qchisq(0.95,2*n)/2)
#plot(apply(log(z1), 2, sum),ylim = c(-1.25*n,-n/4))
#points(apply(log(z2), 2, sum),col=2)
#abline(h = -qchisq(0.05,2*n)/2)
#abline(h = -qchisq(0.95,2*n)/2)
typeIIerrorFisher = c(typeIIerrorFisher,
sum(apply(log(z2), 2, sum)>-qchisq(0.95,2*n)/2))
#sum(apply(log(z1), 2, sum)>-qchisq(0.95,2*n)/2)
#plot(apply(z1, 2, sum),ylim = c(0, n))
#points(apply(z2, 2, sum),col=2)
#abline(h = qnorm(0.05,n/2,sqrt(n/12)))
#abline(h = qnorm(0.95,n/2,sqrt(n/12)))
typeIIerrorEdgington = c(typeIIerrorEdgington,
sum(apply(z2, 2, sum)>qnorm(0.05,n/2,sqrt(n/12))))
#sum(apply(z1, 2, sum)>qnorm(0.05,n/2,sqrt(n/12)))
#plot(apply(d1^2, 2, sum),ylim = c(n/2, 2*n))
#points(apply(d2^2, 2, sum),col=2)
#abline(h = qchisq(0.05,n))
#abline(h = qchisq(0.95,n))
typeIIerrorChisq = c(typeIIerrorChisq,
sum(apply(d2^2, 2, sum)<qchisq(0.95,n)))
#sum(apply(z1, 2, sum)>qnorm(0.05,n/2,sqrt(n/12)))
}
typeIIerrorNaive
typeIIerrorFisher
typeIIerrorEdgington
typeIIerrorChisq
for(n in 10^(1:4)){
shift = -2/sqrt(n)
fraction = 0.8
N = 10^3
d1 = matrix(rnorm(n*N),n,N)
z1 = pnorm(d1)
d2 = d1 + c(rep(shift,n*fraction),rep(0,n-n*fraction))
z2 = pnorm(d2)
#plot(apply(d1, 2, sum),ylim = c(-10*sqrt(n),10*sqrt(n)))
#points(apply(d2, 2, sum),col=2)
#abline(h = -1.96*sqrt(n))
#abline(h = 1.96*sqrt(n))
typeIIerrorNaive = c(typeIIerrorNaive,
sum(apply(d2, 2, sum)>-1.65*sqrt(n)))
#sum(apply(log(z1), 2, sum)>-qchisq(0.95,2*n)/2)
#plot(apply(log(z1), 2, sum),ylim = c(-1.25*n,-n/4))
#points(apply(log(z2), 2, sum),col=2)
#abline(h = -qchisq(0.05,2*n)/2)
#abline(h = -qchisq(0.95,2*n)/2)
typeIIerrorFisher = c(typeIIerrorFisher,
sum(apply(log(z2), 2, sum)>-qchisq(0.95,2*n)/2))
#sum(apply(log(z1), 2, sum)>-qchisq(0.95,2*n)/2)
#plot(apply(z1, 2, sum),ylim = c(0, n))
#points(apply(z2, 2, sum),col=2)
#abline(h = qnorm(0.05,n/2,sqrt(n/12)))
#abline(h = qnorm(0.95,n/2,sqrt(n/12)))
typeIIerrorEdgington = c(typeIIerrorEdgington,
sum(apply(z2, 2, sum)>qnorm(0.05,n/2,sqrt(n/12))))
#sum(apply(z1, 2, sum)>qnorm(0.05,n/2,sqrt(n/12)))
#plot(apply(d1^2, 2, sum),ylim = c(n/2, 2*n))
#points(apply(d2^2, 2, sum),col=2)
#abline(h = qchisq(0.05,n))
#abline(h = qchisq(0.95,n))
typeIIerrorChisq = c(typeIIerrorChisq,
sum(apply(d2^2, 2, sum)<qchisq(0.95,n)))
#sum(apply(z1, 2, sum)>qnorm(0.05,n/2,sqrt(n/12)))
}
typeIIerrorNaive
typeIIerrorFisher
typeIIerrorEdgington
typeIIerrorChisq
#### From low to high dimensions ####
typeIIerrorNaive = c()
typeIIerrorFisher = c()
typeIIerrorEdgington = c()
typeIIerrorChisq = c() # bad
for(n in 10^(1:4)){
shift = -2/sqrt(n)
fraction = 0.9
N = 10^3
d1 = matrix(rnorm(n*N),n,N)
z1 = pnorm(d1)
d2 = d1 + c(rep(shift,n*fraction),rep(0,n-n*fraction))
z2 = pnorm(d2)
#plot(apply(d1, 2, sum),ylim = c(-10*sqrt(n),10*sqrt(n)))
#points(apply(d2, 2, sum),col=2)
#abline(h = -1.96*sqrt(n))
#abline(h = 1.96*sqrt(n))
typeIIerrorNaive = c(typeIIerrorNaive,
sum(apply(d2, 2, sum)>-1.65*sqrt(n)))
#sum(apply(log(z1), 2, sum)>-qchisq(0.95,2*n)/2)
#plot(apply(log(z1), 2, sum),ylim = c(-1.25*n,-n/4))
#points(apply(log(z2), 2, sum),col=2)
#abline(h = -qchisq(0.05,2*n)/2)
#abline(h = -qchisq(0.95,2*n)/2)
typeIIerrorFisher = c(typeIIerrorFisher,
sum(apply(log(z2), 2, sum)>-qchisq(0.95,2*n)/2))
#sum(apply(log(z1), 2, sum)>-qchisq(0.95,2*n)/2)
#plot(apply(z1, 2, sum),ylim = c(0, n))
#points(apply(z2, 2, sum),col=2)
#abline(h = qnorm(0.05,n/2,sqrt(n/12)))
#abline(h = qnorm(0.95,n/2,sqrt(n/12)))
typeIIerrorEdgington = c(typeIIerrorEdgington,
sum(apply(z2, 2, sum)>qnorm(0.05,n/2,sqrt(n/12))))
#sum(apply(z1, 2, sum)>qnorm(0.05,n/2,sqrt(n/12)))
#plot(apply(d1^2, 2, sum),ylim = c(n/2, 2*n))
#points(apply(d2^2, 2, sum),col=2)
#abline(h = qchisq(0.05,n))
#abline(h = qchisq(0.95,n))
typeIIerrorChisq = c(typeIIerrorChisq,
sum(apply(d2^2, 2, sum)<qchisq(0.95,n)))
#sum(apply(z1, 2, sum)>qnorm(0.05,n/2,sqrt(n/12)))
}
typeIIerrorNaive
typeIIerrorFisher
typeIIerrorEdgington
typeIIerrorChisq
setwd("/home/gaozheng/Coursework/Biostat615/hw2/")
list.files()
data <- read.csv("minSubSum.test3.input",sep = " ")
data <- read.csv("minSubSum.test3.input",sep = " ",header = F)
?scan
data <- scan("minSubSum.test3.input",sep = " ")
tail(data)
data <- data[1:1000000]
data <- scan("minSubSum.test3.input",sep = " ")
data <- data[1:1000000]
for(i in 1:length(data)){
if(data[i]<0) {
sum = sum + data[i]
} else {
if(sum < min) {min = sum}
sum <- 0
}
}
i
data[i]
sum
data <- data[1:1000000]
tempsum <- 0
min <- 0
for(i in 1:length(data)){
if(data[i]<0) {
tempsum = tempsum + data[i]
} else {
if(tempsum < min) {min = tempsum}
tempsum <- 0
}
}
min
tempsum
if(tempsum < min) min = tempsum
data[i]
i
min
data[1:1]
data[1:2]
tempsum <- 0
min <- 0
for(i in 1:length(data)){
for(j in 1:length(data)){
tempsum = sum(data[i:j])
if(tempsum < min) min = tempsum
}
}
tempsum <- 0
min <- 0
for(i in 1:length(data)){
for(j in i:length(data)){
tempsum = sum(data[i:j])
if(tempsum < min) min = tempsum
}
}
tempsum <- 0
min <- 0
for(i in 1:length(data)){
if(data[i]<=0) {
tempsum = tempsum + data[i]
} else {
if(tempsum < min) {min = tempsum}
tempsum <- 0
}
}
if(tempsum < min) min = tempsum
min
tempsum <- 0
min <- 0
for(i in 1:length(data)){
if(data[i]<=0) {
tempsum = tempsum + data[i]
} else {
if(tempsum < min) {min = tempsum}
tempsum <- 0
}
}
if(tempsum < min) min = tempsum
min
generate <- function(x){
N = numeric(x)
for (i in 1:x){
n=0
sum=0
while(sum<=1){
u <- runif(1,0,1)
sum = sum + u
n = n+1
}
N[i] = n
}
return(N)
}
generate(x)
generate(10)
plot(table(generate(100000)));mean(generate(100000))
plot(table(generate(100000)));mean(generate(100000))
length("-36,23,-35,24,-84,68,-37,-85,26,21,17,38,12,-98,-28,-17,-2,-30,-55,-30,89,40,11,-72,87,-88,-28,87,63,71,-51,19,86,73,-97,-12,-46,93,78,10,90,-62,-5,-59,-48,-80,75,-41,14,-2,23,-32,-64,-76,-82,-36,89,-28,-21,77,87,33,-33,-97,89,-9,-51,-4,81,42,89,-34,-55,-64,51,68,-44,13,-80,12,0,23,-21,82,22,91,-86,78,-31,-64,-56,84,-76,27,33,61,-95,-76,74,-46,-5,-86,51,-44,-59,66,89,-65,-42,-15,40,61,-85,22,-11,-57,-65,-25,-49,76,-44,-90,-3,53,-32,-94,63,-18,22,91,87,-93,66,-71,-33,-49,100,20,-77,-11,50,55,-70,49,-61,14,42,-73,94,35,-28,53,-19,0,-49,87,48,-15,-23,33,-50,-8,32,-71,93,5,-46,32,75,-51,-43,12,-65,81,9,-36,53,69,84,-49,100,-42,-74,95,-16,-70,-41,-84,-44,-88,78,-62,-19,-60,23,25,-74,-26,-46,8,15,-47,10,23,-25,78,44,-65,-16,-41,-40,-36,-5,10,11,68,19,35,66,-38,12,-23,-86,-9,27,-29,-76,93,-50,-30,71,-43,84,32,-30,-92,61,-31,55,-65,-10,-49,61,7,-73,-99,-90,62,-35,-95,43,76,-75,26,57,-91,86,82,68,92,92,52,-20,79,-93,4,63,82,-1,67,-83,29,62,-47,82,44,8,-31,25,57,-8,-82,-57,-64,82,86,89,-95,67,37,52,68,-8,-23,-27,93,3,-40,71,-36,-88,14,78,84,-31,-89,-96,-74,14,-51,49,-59,39,54,-45,46,22,53,71,71,99,84,87,-44,-26,4,-68,91,11,-19,-76,68,-100,0,66,82,-98,28,33,49,58,-14,-78,85,48,-82,44,-7,-81,21,95,-25,18,-53,-75,-26,-57,44,52,77,40,-65,-94,54,-16,-30,46,4,-28,80,94,-44,-34,-60,-21,17,-19,28,96,-20,100,87,27,-63,-33,1,-42,26,-83,-70,-47,-60,48,61,-87,-97,-61,35,75,16,-2,15,65,14,34,-66,-74,35,33,-13,24,-34,50,-68,-99,31,65,32,-76,-7,47,-46,-46,-42,-22,-67,-87,-23,99,4,-94,10,-26,-10,75,-40,-60,37,26,-70,-70,-81,72,-49,48,-8,42,-8,-10,-29,-100,95,-42,48,84,76,78,-23,77,95,83,-62,-68,78,93,66,49,-19,-70,41,60,56,-68,44,79,40,80,-77,82,1,3,-43,49,-30,58,-3,-2,-29,31,-30,27,-97,-96,-75,-61,-35,-88,73,14,79,-47,-46,-70,5,-9,-54,-33,-63,-33,-32,42,-18,66,14,-61,-46,41,45,-4,-48,-6,80,38,-91,81,-52,-8,59,56,-26,62,-44,61,69,60,100,21,-67,-80,6,-88,7,9,22,63,36,51,-44,-36,90,-63,-10,37,-86,31,85,77,-93,94,-61,-24,34,78,-55,-100,98,49,-53,-88,-79,63,38,95,-8,97,-54,-18,27,-75,33,-18,41,-58,-57,-89,-6,56,31,-70,-68,83,-21,72,9,77,98,2,-23,18,64,70,57,-58,-82,-59,-84,53,43,-66,-100,15,50,65,0,18,-91,9,89,-52,-79,-87,-80,-58,-28,-48,-46,-55,-66,-85,-96,62,-37,75,39,21,-51,60,11,67,18,-27,12,-87,-86,-78,18,67,27,49,-65,6,89,39,-23,67,-24,90,34,-85,30,-50,56,58,-86,-98,74,-51,78,49,69,16,-77,-81,50,36,99,1,-61,-28,90,7,84,19,-60,-59,12,-69,-19,38,44,-41,47,-14,67,-96,-39,-65,40,-80,-41,-13,12,92,-13,0,8,0,-57,42,89,-93,-81,-6,98,96,-69,-53,-33,-39,65,-98,47,44,14,-96,-24,1,-63,-47,-26,65,-87,-5,53,40,63,86,49,-52,-82,-50,14,72,61,-88,18,46,16,33,10,43,-6,5,-80,-97,52,-34,32,-79,-94,37,89,43,-82,-41,-33,75,35,48,7,6,-4,-82,90,54,88,-55,-13,84,-93,-13,88,47,47,-33,-42,-19,74,-67,-7,56,96,-68,-35,-83,59,15,57,1,-83,53,43,-94,68,60,60,24,-37,25,34,35,-3,-94,-62,2,23,68,-84,98,45,70,72,27,58,-23,42,60,-45,-62,78,23,-92,-96,-47,-85,81,-88,10,-41,77,50,37,65,-31,100,-41,34,-56,70,-97,3,-24,-70,-93,-7,-47,-29,-86,35,63,-31,22,-76,21,-40,20,-69,11,35,-89,-10,39,74,52,4,13,-55,46,-97,63,-19,-58,22,16,-97,95,68,-36,12,-61,-40,-6,-87,73,-31,80,49,34,-9,54,61,2,-80,35,27,-11,2,-99,-93,71,-64,-5,-75,93,57,-4,-94,61,22,-50,96,-35,22,-32,-2,-19,-24,-35,60,-2,-72,-70,89,-22,91,89,96,94,55,-27,15,100,13,13,60,-67,100,51,-62,85,35,-54,76,-23,2,-10,-58,66,94,64,-22,91,-20,-50,-23,14,-5,-45,-51,4,53,-89,53,77,66,91,9,-91,-72,-27,-83,-25,-43,41,-48,-64,-84,48,95,-3,58,73,-75,53,-96,64,-74,-44,26,87,50,50,5,7,36,67,0,2,-32,20,18,51,-1,44,18,-4,0,-50,47,-2,-10,69,-48,44,-100,20,35,76,-72,-38,83,91,29,-73,-69,7,66,-31,-27,-38,-97,-82,69,-39,-14,-8,-1,4,-93,-21,-94,-53,65,-66,-70,-12,5,-61,-83,-8,-16,2,46,5,-15,50,-33,-85,-48,-100,-36,-11,42,61,22,-26,-73,30,35,-10,-14,88,31,64,78,24,-72,-70,-15,-58,-52,-31,83,-86,-67,2,-68,64,36,52,-10,58,-41,-65,45,-3,-91,99,-12,-58,-47,-23,-98,-95,25,-25,34,-22,64,21,21,-58,18,-54,-77,81,84,-79,-82,93,50,13,37,-61,-77,74,-92,-5,-84,60,29,-48,9,12,27,-23,-76,-50,-95,-17,63,58,-38,28,35,-59,-99,14,24,-7,47,73,-56,-100,82,73,5,9,97,-19,-67,-24,63,6,65,-82,-15,98,-74,-82,-15,-44,-75,-29,38,-96,-32,-11,-99,48,55,29,-47,9,-92,-33,79,-45,34,-60")
string1 <- "-36,23,-35,24,-84,68,-37,-85,26,21,17,38,12,-98,-28,-17,-2,-30,-55,-30,89,40,11,-72,87,-88,-28,87,63,71,-51,19,86,73,-97,-12,-46,93,78,10,90,-62,-5,-59,-48,-80,75,-41,14,-2,23,-32,-64,-76,-82,-36,89,-28,-21,77,87,33,-33,-97,89,-9,-51,-4,81,42,89,-34,-55,-64,51,68,-44,13,-80,12,0,23,-21,82,22,91,-86,78,-31,-64,-56,84,-76,27,33,61,-95,-76,74,-46,-5,-86,51,-44,-59,66,89,-65,-42,-15,40,61,-85,22,-11,-57,-65,-25,-49,76,-44,-90,-3,53,-32,-94,63,-18,22,91,87,-93,66,-71,-33,-49,100,20,-77,-11,50,55,-70,49,-61,14,42,-73,94,35,-28,53,-19,0,-49,87,48,-15,-23,33,-50,-8,32,-71,93,5,-46,32,75,-51,-43,12,-65,81,9,-36,53,69,84,-49,100,-42,-74,95,-16,-70,-41,-84,-44,-88,78,-62,-19,-60,23,25,-74,-26,-46,8,15,-47,10,23,-25,78,44,-65,-16,-41,-40,-36,-5,10,11,68,19,35,66,-38,12,-23,-86,-9,27,-29,-76,93,-50,-30,71,-43,84,32,-30,-92,61,-31,55,-65,-10,-49,61,7,-73,-99,-90,62,-35,-95,43,76,-75,26,57,-91,86,82,68,92,92,52,-20,79,-93,4,63,82,-1,67,-83,29,62,-47,82,44,8,-31,25,57,-8,-82,-57,-64,82,86,89,-95,67,37,52,68,-8,-23,-27,93,3,-40,71,-36,-88,14,78,84,-31,-89,-96,-74,14,-51,49,-59,39,54,-45,46,22,53,71,71,99,84,87,-44,-26,4,-68,91,11,-19,-76,68,-100,0,66,82,-98,28,33,49,58,-14,-78,85,48,-82,44,-7,-81,21,95,-25,18,-53,-75,-26,-57,44,52,77,40,-65,-94,54,-16,-30,46,4,-28,80,94,-44,-34,-60,-21,17,-19,28,96,-20,100,87,27,-63,-33,1,-42,26,-83,-70,-47,-60,48,61,-87,-97,-61,35,75,16,-2,15,65,14,34,-66,-74,35,33,-13,24,-34,50,-68,-99,31,65,32,-76,-7,47,-46,-46,-42,-22,-67,-87,-23,99,4,-94,10,-26,-10,75,-40,-60,37,26,-70,-70,-81,72,-49,48,-8,42,-8,-10,-29,-100,95,-42,48,84,76,78,-23,77,95,83,-62,-68,78,93,66,49,-19,-70,41,60,56,-68,44,79,40,80,-77,82,1,3,-43,49,-30,58,-3,-2,-29,31,-30,27,-97,-96,-75,-61,-35,-88,73,14,79,-47,-46,-70,5,-9,-54,-33,-63,-33,-32,42,-18,66,14,-61,-46,41,45,-4,-48,-6,80,38,-91,81,-52,-8,59,56,-26,62,-44,61,69,60,100,21,-67,-80,6,-88,7,9,22,63,36,51,-44,-36,90,-63,-10,37,-86,31,85,77,-93,94,-61,-24,34,78,-55,-100,98,49,-53,-88,-79,63,38,95,-8,97,-54,-18,27,-75,33,-18,41,-58,-57,-89,-6,56,31,-70,-68,83,-21,72,9,77,98,2,-23,18,64,70,57,-58,-82,-59,-84,53,43,-66,-100,15,50,65,0,18,-91,9,89,-52,-79,-87,-80,-58,-28,-48,-46,-55,-66,-85,-96,62,-37,75,39,21,-51,60,11,67,18,-27,12,-87,-86,-78,18,67,27,49,-65,6,89,39,-23,67,-24,90,34,-85,30,-50,56,58,-86,-98,74,-51,78,49,69,16,-77,-81,50,36,99,1,-61,-28,90,7,84,19,-60,-59,12,-69,-19,38,44,-41,47,-14,67,-96,-39,-65,40,-80,-41,-13,12,92,-13,0,8,0,-57,42,89,-93,-81,-6,98,96,-69,-53,-33,-39,65,-98,47,44,14,-96,-24,1,-63,-47,-26,65,-87,-5,53,40,63,86,49,-52,-82,-50,14,72,61,-88,18,46,16,33,10,43,-6,5,-80,-97,52,-34,32,-79,-94,37,89,43,-82,-41,-33,75,35,48,7,6,-4,-82,90,54,88,-55,-13,84,-93,-13,88,47,47,-33,-42,-19,74,-67,-7,56,96,-68,-35,-83,59,15,57,1,-83,53,43,-94,68,60,60,24,-37,25,34,35,-3,-94,-62,2,23,68,-84,98,45,70,72,27,58,-23,42,60,-45,-62,78,23,-92,-96,-47,-85,81,-88,10,-41,77,50,37,65,-31,100,-41,34,-56,70,-97,3,-24,-70,-93,-7,-47,-29,-86,35,63,-31,22,-76,21,-40,20,-69,11,35,-89,-10,39,74,52,4,13,-55,46,-97,63,-19,-58,22,16,-97,95,68,-36,12,-61,-40,-6,-87,73,-31,80,49,34,-9,54,61,2,-80,35,27,-11,2,-99,-93,71,-64,-5,-75,93,57,-4,-94,61,22,-50,96,-35,22,-32,-2,-19,-24,-35,60,-2,-72,-70,89,-22,91,89,96,94,55,-27,15,100,13,13,60,-67,100,51,-62,85,35,-54,76,-23,2,-10,-58,66,94,64,-22,91,-20,-50,-23,14,-5,-45,-51,4,53,-89,53,77,66,91,9,-91,-72,-27,-83,-25,-43,41,-48,-64,-84,48,95,-3,58,73,-75,53,-96,64,-74,-44,26,87,50,50,5,7,36,67,0,2,-32,20,18,51,-1,44,18,-4,0,-50,47,-2,-10,69,-48,44,-100,20,35,76,-72,-38,83,91,29,-73,-69,7,66,-31,-27,-38,-97,-82,69,-39,-14,-8,-1,4,-93,-21,-94,-53,65,-66,-70,-12,5,-61,-83,-8,-16,2,46,5,-15,50,-33,-85,-48,-100,-36,-11,42,61,22,-26,-73,30,35,-10,-14,88,31,64,78,24,-72,-70,-15,-58,-52,-31,83,-86,-67,2,-68,64,36,52,-10,58,-41,-65,45,-3,-91,99,-12,-58,-47,-23,-98,-95,25,-25,34,-22,64,21,21,-58,18,-54,-77,81,84,-79,-82,93,50,13,37,-61,-77,74,-92,-5,-84,60,29,-48,9,12,27,-23,-76,-50,-95,-17,63,58,-38,28,35,-59,-99,14,24,-7,47,73,-56,-100,82,73,5,9,97,-19,-67,-24,63,6,65,-82,-15,98,-74,-82,-15,-44,-75,-29,38,-96,-32,-11,-99,48,55,29,-47,9,-92,-33,79,-45,34,-60")
string1 <- "-36,23,-35,24,-84,68,-37,-85,26,21,17,38,12,-98,-28,-17,-2,-30,-55,-30,89,40,11,-72,87,-88,-28,87,63,71,-51,19,86,73,-97,-12,-46,93,78,10,90,-62,-5,-59,-48,-80,75,-41,14,-2,23,-32,-64,-76,-82,-36,89,-28,-21,77,87,33,-33,-97,89,-9,-51,-4,81,42,89,-34,-55,-64,51,68,-44,13,-80,12,0,23,-21,82,22,91,-86,78,-31,-64,-56,84,-76,27,33,61,-95,-76,74,-46,-5,-86,51,-44,-59,66,89,-65,-42,-15,40,61,-85,22,-11,-57,-65,-25,-49,76,-44,-90,-3,53,-32,-94,63,-18,22,91,87,-93,66,-71,-33,-49,100,20,-77,-11,50,55,-70,49,-61,14,42,-73,94,35,-28,53,-19,0,-49,87,48,-15,-23,33,-50,-8,32,-71,93,5,-46,32,75,-51,-43,12,-65,81,9,-36,53,69,84,-49,100,-42,-74,95,-16,-70,-41,-84,-44,-88,78,-62,-19,-60,23,25,-74,-26,-46,8,15,-47,10,23,-25,78,44,-65,-16,-41,-40,-36,-5,10,11,68,19,35,66,-38,12,-23,-86,-9,27,-29,-76,93,-50,-30,71,-43,84,32,-30,-92,61,-31,55,-65,-10,-49,61,7,-73,-99,-90,62,-35,-95,43,76,-75,26,57,-91,86,82,68,92,92,52,-20,79,-93,4,63,82,-1,67,-83,29,62,-47,82,44,8,-31,25,57,-8,-82,-57,-64,82,86,89,-95,67,37,52,68,-8,-23,-27,93,3,-40,71,-36,-88,14,78,84,-31,-89,-96,-74,14,-51,49,-59,39,54,-45,46,22,53,71,71,99,84,87,-44,-26,4,-68,91,11,-19,-76,68,-100,0,66,82,-98,28,33,49,58,-14,-78,85,48,-82,44,-7,-81,21,95,-25,18,-53,-75,-26,-57,44,52,77,40,-65,-94,54,-16,-30,46,4,-28,80,94,-44,-34,-60,-21,17,-19,28,96,-20,100,87,27,-63,-33,1,-42,26,-83,-70,-47,-60,48,61,-87,-97,-61,35,75,16,-2,15,65,14,34,-66,-74,35,33,-13,24,-34,50,-68,-99,31,65,32,-76,-7,47,-46,-46,-42,-22,-67,-87,-23,99,4,-94,10,-26,-10,75,-40,-60,37,26,-70,-70,-81,72,-49,48,-8,42,-8,-10,-29,-100,95,-42,48,84,76,78,-23,77,95,83,-62,-68,78,93,66,49,-19,-70,41,60,56,-68,44,79,40,80,-77,82,1,3,-43,49,-30,58,-3,-2,-29,31,-30,27,-97,-96,-75,-61,-35,-88,73,14,79,-47,-46,-70,5,-9,-54,-33,-63,-33,-32,42,-18,66,14,-61,-46,41,45,-4,-48,-6,80,38,-91,81,-52,-8,59,56,-26,62,-44,61,69,60,100,21,-67,-80,6,-88,7,9,22,63,36,51,-44,-36,90,-63,-10,37,-86,31,85,77,-93,94,-61,-24,34,78,-55,-100,98,49,-53,-88,-79,63,38,95,-8,97,-54,-18,27,-75,33,-18,41,-58,-57,-89,-6,56,31,-70,-68,83,-21,72,9,77,98,2,-23,18,64,70,57,-58,-82,-59,-84,53,43,-66,-100,15,50,65,0,18,-91,9,89,-52,-79,-87,-80,-58,-28,-48,-46,-55,-66,-85,-96,62,-37,75,39,21,-51,60,11,67,18,-27,12,-87,-86,-78,18,67,27,49,-65,6,89,39,-23,67,-24,90,34,-85,30,-50,56,58,-86,-98,74,-51,78,49,69,16,-77,-81,50,36,99,1,-61,-28,90,7,84,19,-60,-59,12,-69,-19,38,44,-41,47,-14,67,-96,-39,-65,40,-80,-41,-13,12,92,-13,0,8,0,-57,42,89,-93,-81,-6,98,96,-69,-53,-33,-39,65,-98,47,44,14,-96,-24,1,-63,-47,-26,65,-87,-5,53,40,63,86,49,-52,-82,-50,14,72,61,-88,18,46,16,33,10,43,-6,5,-80,-97,52,-34,32,-79,-94,37,89,43,-82,-41,-33,75,35,48,7,6,-4,-82,90,54,88,-55,-13,84,-93,-13,88,47,47,-33,-42,-19,74,-67,-7,56,96,-68,-35,-83,59,15,57,1,-83,53,43,-94,68,60,60,24,-37,25,34,35,-3,-94,-62,2,23,68,-84,98,45,70,72,27,58,-23,42,60,-45,-62,78,23,-92,-96,-47,-85,81,-88,10,-41,77,50,37,65,-31,100,-41,34,-56,70,-97,3,-24,-70,-93,-7,-47,-29,-86,35,63,-31,22,-76,21,-40,20,-69,11,35,-89,-10,39,74,52,4,13,-55,46,-97,63,-19,-58,22,16,-97,95,68,-36,12,-61,-40,-6,-87,73,-31,80,49,34,-9,54,61,2,-80,35,27,-11,2,-99,-93,71,-64,-5,-75,93,57,-4,-94,61,22,-50,96,-35,22,-32,-2,-19,-24,-35,60,-2,-72,-70,89,-22,91,89,96,94,55,-27,15,100,13,13,60,-67,100,51,-62,85,35,-54,76,-23,2,-10,-58,66,94,64,-22,91,-20,-50,-23,14,-5,-45,-51,4,53,-89,53,77,66,91,9,-91,-72,-27,-83,-25,-43,41,-48,-64,-84,48,95,-3,58,73,-75,53,-96,64,-74,-44,26,87,50,50,5,7,36,67,0,2,-32,20,18,51,-1,44,18,-4,0,-50,47,-2,-10,69,-48,44,-100,20,35,76,-72,-38,83,91,29,-73,-69,7,66,-31,-27,-38,-97,-82,69,-39,-14,-8,-1,4,-93,-21,-94,-53,65,-66,-70,-12,5,-61,-83,-8,-16,2,46,5,-15,50,-33,-85,-48,-100,-36,-11,42,61,22,-26,-73,30,35,-10,-14,88,31,64,78,24,-72,-70,-15,-58,-52,-31,83,-86,-67,2,-68,64,36,52,-10,58,-41,-65,45,-3,-91,99,-12,-58,-47,-23,-98,-95,25,-25,34,-22,64,21,21,-58,18,-54,-77,81,84,-79,-82,93,50,13,37,-61,-77,74,-92,-5,-84,60,29,-48,9,12,27,-23,-76,-50,-95,-17,63,58,-38,28,35,-59,-99,14,24,-7,47,73,-56,-100,82,73,5,9,97,-19,-67,-24,63,6,65,-82,-15,98,-74,-82,-15,-44,-75,-29,38,-96,-32,-11,-99,48,55,29,-47,9,-92,-33,79,-45,34,-60"
string1 <- "-36 23 -35 24 -84 68 -37 -85 26 21 17 38 12 -98 -28 -17 -2 -30 -55 -30 89 40 11 -72 87 -88 -28 87 63 71 -51 19 86 73 -97 -12 -46 93 78 10 90 -62 -5 -59 -48 -80 75 -41 14 -2 23 -32 -64 -76 -82 -36 89 -28 -21 77 87 33 -33 -97 89 -9 -51 -4 81 42 89 -34 -55 -64 51 68 -44 13 -80 12 0 23 -21 82 22 91 -86 78 -31 -64 -56 84 -76 27 33 61 -95 -76 74 -46 -5 -86 51 -44 -59 66 89 -65 -42 -15 40 61 -85 22 -11 -57 -65 -25 -49 76 -44 -90 -3 53 -32 -94 63 -18 22 91 87 -93 66 -71 -33 -49 100 20 -77 -11 50 55 -70 49 -61 14 42 -73 94 35 -28 53 -19 0 -49 87 48 -15 -23 33 -50 -8 32 -71 93 5 -46 32 75 -51 -43 12 -65 81 9 -36 53 69 84 -49 100 -42 -74 95 -16 -70 -41 -84 -44 -88 78 -62 -19 -60 23 25 -74 -26 -46 8 15 -47 10 23 -25 78 44 -65 -16 -41 -40 -36 -5 10 11 68 19 35 66 -38 12 -23 -86 -9 27 -29 -76 93 -50 -30 71 -43 84 32 -30 -92 61 -31 55 -65 -10 -49 61 7 -73 -99 -90 62 -35 -95 43 76 -75 26 57 -91 86 82 68 92 92 52 -20 79 -93 4 63 82 -1 67 -83 29 62 -47 82 44 8 -31 25 57 -8 -82 -57 -64 82 86 89 -95 67 37 52 68 -8 -23 -27 93 3 -40 71 -36 -88 14 78 84 -31 -89 -96 -74 14 -51 49 -59 39 54 -45 46 22 53 71 71 99 84 87 -44 -26 4 -68 91 11 -19 -76 68 -100 0 66 82 -98 28 33 49 58 -14 -78 85 48 -82 44 -7 -81 21 95 -25 18 -53 -75 -26 -57 44 52 77 40 -65 -94 54 -16 -30 46 4 -28 80 94 -44 -34 -60 -21 17 -19 28 96 -20 100 87 27 -63 -33 1 -42 26 -83 -70 -47 -60 48 61 -87 -97 -61 35 75 16 -2 15 65 14 34 -66 -74 35 33 -13 24 -34 50 -68 -99 31 65 32 -76 -7 47 -46 -46 -42 -22 -67 -87 -23 99 4 -94 10 -26 -10 75 -40 -60 37 26 -70 -70 -81 72 -49 48 -8 42 -8 -10 -29 -100 95 -42 48 84 76 78 -23 77 95 83 -62 -68 78 93 66 49 -19 -70 41 60 56 -68 44 79 40 80 -77 82 1 3 -43 49 -30 58 -3 -2 -29 31 -30 27 -97 -96 -75 -61 -35 -88 73 14 79 -47 -46 -70 5 -9 -54 -33 -63 -33 -32 42 -18 66 14 -61 -46 41 45 -4 -48 -6 80 38 -91 81 -52 -8 59 56 -26 62 -44 61 69 60 100 21 -67 -80 6 -88 7 9 22 63 36 51 -44 -36 90 -63 -10 37 -86 31 85 77 -93 94 -61 -24 34 78 -55 -100 98 49 -53 -88 -79 63 38 95 -8 97 -54 -18 27 -75 33 -18 41 -58 -57 -89 -6 56 31 -70 -68 83 -21 72 9 77 98 2 -23 18 64 70 57 -58 -82 -59 -84 53 43 -66 -100 15 50 65 0 18 -91 9 89 -52 -79 -87 -80 -58 -28 -48 -46 -55 -66 -85 -96 62 -37 75 39 21 -51 60 11 67 18 -27 12 -87 -86 -78 18 67 27 49 -65 6 89 39 -23 67 -24 90 34 -85 30 -50 56 58 -86 -98 74 -51 78 49 69 16 -77 -81 50 36 99 1 -61 -28 90 7 84 19 -60 -59 12 -69 -19 38 44 -41 47 -14 67 -96 -39 -65 40 -80 -41 -13 12 92 -13 0 8 0 -57 42 89 -93 -81 -6 98 96 -69 -53 -33 -39 65 -98 47 44 14 -96 -24 1 -63 -47 -26 65 -87 -5 53 40 63 86 49 -52 -82 -50 14 72 61 -88 18 46 16 33 10 43 -6 5 -80 -97 52 -34 32 -79 -94 37 89 43 -82 -41 -33 75 35 48 7 6 -4 -82 90 54 88 -55 -13 84 -93 -13 88 47 47 -33 -42 -19 74 -67 -7 56 96 -68 -35 -83 59 15 57 1 -83 53 43 -94 68 60 60 24 -37 25 34 35 -3 -94 -62 2 23 68 -84 98 45 70 72 27 58 -23 42 60 -45 -62 78 23 -92 -96 -47 -85 81 -88 10 -41 77 50 37 65 -31 100 -41 34 -56 70 -97 3 -24 -70 -93 -7 -47 -29 -86 35 63 -31 22 -76 21 -40 20 -69 11 35 -89 -10 39 74 52 4 13 -55 46 -97 63 -19 -58 22 16 -97 95 68 -36 12 -61 -40 -6 -87 73 -31 80 49 34 -9 54 61 2 -80 35 27 -11 2 -99 -93 71 -64 -5 -75 93 57 -4 -94 61 22 -50 96 -35 22 -32 -2 -19 -24 -35 60 -2 -72 -70 89 -22 91 89 96 94 55 -27 15 100 13 13 60 -67 100 51 -62 85 35 -54 76 -23 2 -10 -58 66 94 64 -22 91 -20 -50 -23 14 -5 -45 -51 4 53 -89 53 77 66 91 9 -91 -72 -27 -83 -25 -43 41 -48 -64 -84 48 95 -3 58 73 -75 53 -96 64 -74 -44 26 87 50 50 5 7 36 67 0 2 -32 20 18 51 -1 44 18 -4 0 -50 47 -2 -10 69 -48 44 -100 20 35 76 -72 -38 83 91 29 -73 -69 7 66 -31 -27 -38 -97 -82 69 -39 -14 -8 -1 4 -93 -21 -94 -53 65 -66 -70 -12 5 -61 -83 -8 -16 2 46 5 -15 50 -33 -85 -48 -100 -36 -11 42 61 22 -26 -73 30 35 -10 -14 88 31 64 78 24 -72 -70 -15 -58 -52 -31 83 -86 -67 2 -68 64 36 52 -10 58 -41 -65 45 -3 -91 99 -12 -58 -47 -23 -98 -95 25 -25 34 -22 64 21 21 -58 18 -54 -77 81 84 -79 -82 93 50 13 37 -61 -77 74 -92 -5 -84 60 29 -48 9 12 27 -23 -76 -50 -95 -17 63 58 -38 28 35 -59 -99 14 24 -7 47 73 -56 -100 82 73 5 9 97 -19 -67 -24 63 6 65 -82 -15 98 -74 -82 -15 -44 -75 -29 38 -96 -32 -11 -99 48 55 29 -47 9 -92 -33 79 -45 34 -60 -83"
string1<-"-36\ 23\ -35\ 24\ -84\ 68\ -37\ -85\ 26\ 21\ 17\ 38\ 12\ -98\ -28\ -17\ -2\ -30\ -55\ -30\ 89\ 40\ 11\ -72\ 87\ -88\ -28\ 87\ 63\ 71\ -51\ 19\ 86\ 73\ -97\ -12\ -46\ 93\ 78\ 10\ 90\ -62\ -5\ -59\ -48\ -80\ 75\ -41\ 14\ -2\ 23\ -32\ -64\ -76\ -82\ -36\ 89\ -28\ -21\ 77\ 87\ 33\ -33\ -97\ 89\ -9\ -51\ -4\ 81\ 42\ 89\ -34\ -55\ -64\ 51\ 68\ -44\ 13\ -80\ 12\ 0\ 23\ -21\ 82\ 22\ 91\ -86\ 78\ -31\ -64\ -56\ 84\ -76\ 27\ 33\ 61\ -95\ -76\ 74\ -46\ -5\ -86\ 51\ -44\ -59\ 66\ 89\ -65\ -42\ -15\ 40\ 61\ -85\ 22\ -11\ -57\ -65\ -25\ -49\ 76\ -44\ -90\ -3\ 53\ -32\ -94\ 63\ -18\ 22\ 91\ 87\ -93\ 66\ -71\ -33\ -49\ 100\ 20\ -77\ -11\ 50\ 55\ -70\ 49\ -61\ 14\ 42\ -73\ 94\ 35\ -28\ 53\ -19\ 0\ -49\ 87\ 48\ -15\ -23\ 33\ -50\ -8\ 32\ -71\ 93\ 5\ -46\ 32\ 75\ -51\ -43\ 12\ -65\ 81\ 9\ -36\ 53\ 69\ 84\ -49\ 100\ -42\ -74\ 95\ -16\ -70\ -41\ -84\ -44\ -88\ 78\ -62\ -19\ -60\ 23\ 25\ -74\ -26\ -46\ 8\ 15\ -47\ 10\ 23\ -25\ 78\ 44\ -65\ -16\ -41\ -40\ -36\ -5\ 10\ 11\ 68\ 19\ 35\ 66\ -38\ 12\ -23\ -86\ -9\ 27\ -29\ -76\ 93\ -50\ -30\ 71\ -43\ 84\ 32\ -30\ -92\ 61\ -31\ 55\ -65\ -10\ -49\ 61\ 7\ -73\ -99\ -90\ 62\ -35\ -95\ 43\ 76\ -75\ 26\ 57\ -91\ 86\ 82\ 68\ 92\ 92\ 52\ -20\ 79\ -93\ 4\ 63\ 82\ -1\ 67\ -83\ 29\ 62\ -47\ 82\ 44\ 8\ -31\ 25\ 57\ -8\ -82\ -57\ -64\ 82\ 86\ 89\ -95\ 67\ 37\ 52\ 68\ -8\ -23\ -27\ 93\ 3\ -40\ 71\ -36\ -88\ 14\ 78\ 84\ -31\ -89\ -96\ -74\ 14\ -51\ 49\ -59\ 39\ 54\ -45\ 46\ 22\ 53\ 71\ 71\ 99\ 84\ 87\ -44\ -26\ 4\ -68\ 91\ 11\ -19\ -76\ 68\ -100\ 0\ 66\ 82\ -98\ 28\ 33\ 49\ 58\ -14\ -78\ 85\ 48\ -82\ 44\ -7\ -81\ 21\ 95\ -25\ 18\ -53\ -75\ -26\ -57\ 44\ 52\ 77\ 40\ -65\ -94\ 54\ -16\ -30\ 46\ 4\ -28\ 80\ 94\ -44\ -34\ -60\ -21\ 17\ -19\ 28\ 96\ -20\ 100\ 87\ 27\ -63\ -33\ 1\ -42\ 26\ -83\ -70\ -47\ -60\ 48\ 61\ -87\ -97\ -61\ 35\ 75\ 16\ -2\ 15\ 65\ 14\ 34\ -66\ -74\ 35\ 33\ -13\ 24\ -34\ 50\ -68\ -99\ 31\ 65\ 32\ -76\ -7\ 47\ -46\ -46\ -42\ -22\ -67\ -87\ -23\ 99\ 4\ -94\ 10\ -26\ -10\ 75\ -40\ -60\ 37\ 26\ -70\ -70\ -81\ 72\ -49\ 48\ -8\ 42\ -8\ -10\ -29\ -100\ 95\ -42\ 48\ 84\ 76\ 78\ -23\ 77\ 95\ 83\ -62\ -68\ 78\ 93\ 66\ 49\ -19\ -70\ 41\ 60\ 56\ -68\ 44\ 79\ 40\ 80\ -77\ 82\ 1\ 3\ -43\ 49\ -30\ 58\ -3\ -2\ -29\ 31\ -30\ 27\ -97\ -96\ -75\ -61\ -35\ -88\ 73\ 14\ 79\ -47\ -46\ -70\ 5\ -9\ -54\ -33\ -63\ -33\ -32\ 42\ -18\ 66\ 14\ -61\ -46\ 41\ 45\ -4\ -48\ -6\ 80\ 38\ -91\ 81\ -52\ -8\ 59\ 56\ -26\ 62\ -44\ 61\ 69\ 60\ 100\ 21\ -67\ -80\ 6\ -88\ 7\ 9\ 22\ 63\ 36\ 51\ -44\ -36\ 90\ -63\ -10\ 37\ -86\ 31\ 85\ 77\ -93\ 94\ -61\ -24\ 34\ 78\ -55\ -100\ 98\ 49\ -53\ -88\ -79\ 63\ 38\ 95\ -8\ 97\ -54\ -18\ 27\ -75\ 33\ -18\ 41\ -58\ -57\ -89\ -6\ 56\ 31\ -70\ -68\ 83\ -21\ 72\ 9\ 77\ 98\ 2\ -23\ 18\ 64\ 70\ 57\ -58\ -82\ -59\ -84\ 53\ 43\ -66\ -100\ 15\ 50\ 65\ 0\ 18\ -91\ 9\ 89\ -52\ -79\ -87\ -80\ -58\ -28\ -48\ -46\ -55\ -66\ -85\ -96\ 62\ -37\ 75\ 39\ 21\ -51\ 60\ 11\ 67\ 18\ -27\ 12\ -87\ -86\ -78\ 18\ 67\ 27\ 49\ -65\ 6\ 89\ 39\ -23\ 67\ -24\ 90\ 34\ -85\ 30\ -50\ 56\ 58\ -86\ -98\ 74\ -51\ 78\ 49\ 69\ 16\ -77\ -81\ 50\ 36\ 99\ 1\ -61\ -28\ 90\ 7\ 84\ 19\ -60\ -59\ 12\ -69\ -19\ 38\ 44\ -41\ 47\ -14\ 67\ -96\ -39\ -65\ 40\ -80\ -41\ -13\ 12\ 92\ -13\ 0\ 8\ 0\ -57\ 42\ 89\ -93\ -81\ -6\ 98\ 96\ -69\ -53\ -33\ -39\ 65\ -98\ 47\ 44\ 14\ -96\ -24\ 1\ -63\ -47\ -26\ 65\ -87\ -5\ 53\ 40\ 63\ 86\ 49\ -52\ -82\ -50\ 14\ 72\ 61\ -88\ 18\ 46\ 16\ 33\ 10\ 43\ -6\ 5\ -80\ -97\ 52\ -34\ 32\ -79\ -94\ 37\ 89\ 43\ -82\ -41\ -33\ 75\ 35\ 48\ 7\ 6\ -4\ -82\ 90\ 54\ 88\ -55\ -13\ 84\ -93\ -13\ 88\ 47\ 47\ -33\ -42\ -19\ 74\ -67\ -7\ 56\ 96\ -68\ -35\ -83\ 59\ 15\ 57\ 1\ -83\ 53\ 43\ -94\ 68\ 60\ 60\ 24\ -37\ 25\ 34\ 35\ -3\ -94\ -62\ 2\ 23\ 68\ -84\ 98\ 45\ 70\ 72\ 27\ 58\ -23\ 42\ 60\ -45\ -62\ 78\ 23\ -92\ -96\ -47\ -85\ 81\ -88\ 10\ -41\ 77\ 50\ 37\ 65\ -31\ 100\ -41\ 34\ -56\ 70\ -97\ 3\ -24\ -70\ -93\ -7\ -47\ -29\ -86\ 35\ 63\ -31\ 22\ -76\ 21\ -40\ 20\ -69\ 11\ 35\ -89\ -10\ 39\ 74\ 52\ 4\ 13\ -55\ 46\ -97\ 63\ -19\ -58\ 22\ 16\ -97\ 95\ 68\ -36\ 12\ -61\ -40\ -6\ -87\ 73\ -31\ 80\ 49\ 34\ -9\ 54\ 61\ 2\ -80\ 35\ 27\ -11\ 2\ -99\ -93\ 71\ -64\ -5\ -75\ 93\ 57\ -4\ -94\ 61\ 22\ -50\ 96\ -35\ 22\ -32\ -2\ -19\ -24\ -35\ 60\ -2\ -72\ -70\ 89\ -22\ 91\ 89\ 96\ 94\ 55\ -27\ 15\ 100\ 13\ 13\ 60\ -67\ 100\ 51\ -62\ 85\ 35\ -54\ 76\ -23\ 2\ -10\ -58\ 66\ 94\ 64\ -22\ 91\ -20\ -50\ -23\ 14\ -5\ -45\ -51\ 4\ 53\ -89\ 53\ 77\ 66\ 91\ 9\ -91\ -72\ -27\ -83\ -25\ -43\ 41\ -48\ -64\ -84\ 48\ 95\ -3\ 58\ 73\ -75\ 53\ -96\ 64\ -74\ -44\ 26\ 87\ 50\ 50\ 5\ 7\ 36\ 67\ 0\ 2\ -32\ 20\ 18\ 51\ -1\ 44\ 18\ -4\ 0\ -50\ 47\ -2\ -10\ 69\ -48\ 44\ -100\ 20\ 35\ 76\ -72\ -38\ 83\ 91\ 29\ -73\ -69\ 7\ 66\ -31\ -27\ -38\ -97\ -82\ 69\ -39\ -14\ -8\ -1\ 4\ -93\ -21\ -94\ -53\ 65\ -66\ -70\ -12\ 5\ -61\ -83\ -8\ -16\ 2\ 46\ 5\ -15\ 50\ -33\ -85\ -48\ -100\ -36\ -11\ 42\ 61\ 22\ -26\ -73\ 30\ 35\ -10\ -14\ 88\ 31\ 64\ 78\ 24\ -72\ -70\ -15\ -58\ -52\ -31\ 83\ -86\ -67\ 2\ -68\ 64\ 36\ 52\ -10\ 58\ -41\ -65\ 45\ -3\ -91\ 99\ -12\ -58\ -47\ -23\ -98\ -95\ 25\ -25\ 34\ -22\ 64\ 21\ 21\ -58\ 18\ -54\ -77\ 81\ 84\ -79\ -82\ 93\ 50\ 13\ 37\ -61\ -77\ 74\ -92\ -5\ -84\ 60\ 29\ -48\ 9\ 12\ 27\ -23\ -76\ -50\ -95\ -17\ 63\ 58\ -38\ 28\ 35\ -59\ -99\ 14\ 24\ -7\ 47\ 73\ -56\ -100\ 82\ 73\ 5\ 9\ 97\ -19\ -67\ -24\ 63\ 6\ 65\ -82\ -15\ 98\ -74\ -82\ -15\ -44\ -75\ -29\ 38\ -96\ -32\ -11\ -99\ 48\ 55\ 29\ -47\ 9\ -92\ -33\ 79\ -45\ 34\ -60\ -83"
string1<-"-36\ 23\ -35\ 24\ -84\ 68\ -37\ -85\ 26\ 21\ 17\ 38\ 12\ -98\ -28\ -17\ -2\ -30\ -55\ -30\ 89\ 40\ 11\ -72\ 87\ -88\ -28\ 87\ 63\ 71\ -51\ 19\ 86\ 73\ -97\ -12\ -46\ 93\ 78\ 10\ 90\ -62\ -5\ -59\ -48\ -80\ 75\ -41\ 14\ -2\ 23\ -32\ -64\ -76\ -82\ -36\ 89\ -28\ -21\ 77\ 87\ 33\ -33\ -97\ 89\ -9\ -51\ -4\ 81\ 42\ 89\ -34\ -55\ -64\ 51\ 68\ -44\ 13\ -80\ 12\ 0\ 23\ -21\ 82\ 22\ 91\ -86\ 78\ -31\ -64\ -56\ 84\ -76\ 27\ 33\ 61\ -95\ -76\ 74\ -46\ -5\ -86\ 51\ -44\ -59\ 66\ 89\ -65\ -42\ -15\ 40\ 61\ -85\ 22\ -11\ -57\ -65\ -25\ -49\ 76\ -44\ -90\ -3\ 53\ -32\ -94\ 63\ -18\ 22\ 91\ 87\ -93\ 66\ -71\ -33\ -49\ 100\ 20\ -77\ -11\ 50\ 55\ -70\ 49\ -61\ 14\ 42\ -73\ 94\ 35\ -28\ 53\ -19\ 0\ -49\ 87\ 48\ -15\ -23\ 33\ -50\ -8\ 32\ -71\ 93\ 5\ -46\ 32\ 75\ -51\ -43\ 12\ -65\ 81\ 9\ -36\ 53\ 69\ 84\ -49\ 100\ -42\ -74\ 95\ -16\ -70\ -41\ -84\ -44\ -88\ 78\ -62\ -19\ -60\ 23\ 25\ -74\ -26\ -46\ 8\ 15\ -47\ 10\ 23\ -25\ 78\ 44\ -65\ -16\ -41\ -40\ -36\ -5\ 10\ 11\ 68\ 19\ 35\ 66\ -38\ 12\ -23\ -86\ -9\ 27\ -29\ -76\ 93\ -50\ -30\ 71\ -43\ 84\ 32\ -30\ -92\ 61\ -31\ 55\ -65\ -10\ -49\ 61\ 7\ -73\ -99\ -90\ 62\ -35\ -95\ 43\ 76\ -75\ 26\ 57\ -91\ 86\ 82\ 68\ 92\ 92\ 52\ -20\ 79\ -93\ 4\ 63\ 82\ -1\ 67\ -83\ 29\ 62\ -47\ 82\ 44\ 8\ -31\ 25\ 57\ -8\ -82\ -57\ -64\ 82\ 86\ 89\ -95\ 67\ 37\ 52\ 68\ -8\ -23\ -27\ 93\ 3\ -40\ 71\ -36\ -88\ 14\ 78\ 84\ -31\ -89\ -96\ -74\ 14\ -51\ 49\ -59\ 39\ 54\ -45\ 46\ 22\ 53\ 71\ 71\ 99\ 84\ 87\ -44\ -26\ 4\ -68\ 91\ 11\ -19\ -76\ 68\ -100\ 0\ 66\ 82\ -98\ 28\ 33\ 49\ 58\ -14\ -78\ 85\ 48\ -82\ 44\ -7\ -81\ 21\ 95\ -25\ 18\ -53\ -75\ -26\ -57\ 44\ 52\ 77\ 40\ -65\ -94\ 54\ -16\ -30\ 46\ 4\ -28\ 80\ 94\ -44\ -34\ -60\ -21\ 17\ -19\ 28\ 96\ -20\ 100\ 87\ 27\ -63\ -33\ 1\ -42\ 26\ -83\ -70\ -47\ -60\ 48\ 61\ -87\ -97\ -61\ 35\ 75\ 16\ -2\ 15\ 65\ 14\ 34\ -66\ -74\ 35\ 33\ -13\ 24\ -34\ 50\ -68\ -99\ 31\ 65\ 32\ -76\ -7\ 47\ -46\ -46\ -42\ -22\ -67\ -87\ -23\ 99\ 4\ -94\ 10\ -26\ -10\ 75\ -40\ -60\ 37\ 26\ -70\ -70\ -81\ 72\ -49\ 48\ -8\ 42\ -8\ -10\ -29\ -100\ 95\ -42\ 48\ 84\ 76\ 78\ -23\ 77\ 95\ 83\ -62\ -68\ 78\ 93\ 66\ 49\ -19\ -70\ 41\ 60\ 56\ -68\ 44\ 79\ 40\ 80\ -77\ 82\ 1\ 3\ -43\ 49\ -30\ 58\ -3\ -2\ -29\ 31\ -30\ 27\ -97\ -96\ -75\ -61\ -35\ -88\ 73\ 14\ 79\ -47\ -46\ -70\ 5\ -9\ -54\ -33\ -63\ -33\ -32\ 42\ -18\ 66\ 14\ -61\ -46\ 41\ 45\ -4\ -48\ -6\ 80\ 38\ -91\ 81\ -52\ -8\ 59\ 56\ -26\ 62\ -44\ 61\ 69\ 60\ 100\ 21\ -67\ -80\ 6\ -88\ 7\ 9\ 22\ 63\ 36\ 51\ -44\ -36\ 90\ -63\ -10\ 37\ -86\ 31\ 85\ 77\ -93\ 94\ -61\ -24\ 34\ 78\ -55\ -100\ 98\ 49\ -53\ -88\ -79\ 63\ 38\ 95\ -8\ 97\ -54\ -18\ 27\ -75\ 33\ -18\ 41\ -58\ -57\ -89\ -6\ 56\ 31\ -70\ -68\ 83\ -21\ 72\ 9\ 77\ 98\ 2\ -23\ 18\ 64\ 70\ 57\ -58\ -82\ -59\ -84\ 53\ 43\ -66\ -100\ 15\ 50\ 65\ 0\ 18\ -91\ 9\ 89\ -52\ -79\ -87\ -80\ -58\ -28\ -48\ -46\ -55\ -66\ -85\ -96\ 62\ -37\ 75\ 39\ 21\ -51\ 60\ 11\ 67\ 18\ -27\ 12\ -87\ -86\ -78\ 18\ 67\ 27\ 49\ -65\ 6\ 89\ 39\ -23\ 67\ -24\ 90\ 34\ -85\ 30\ -50\ 56\ 58\ -86\ -98\ 74\ -51\ 78\ 49\ 69\ 16\ -77\ -81\ 50\ 36\ 99\ 1\ -61\ -28\ 90\ 7\ 84\ 19\ -60\ -59\ 12\ -69\ -19\ 38\ 44\ -41\ 47\ -14\ 67\ -96\ -39\ -65\ 40\ -80\ -41\ -13\ 12\ 92\ -13\ 0\ 8\ 0\ -57\ 42\ 89\ -93\ -81\ -6\ 98\ 96\ -69\ -53\ -33\ -39\ 65\ -98\ 47\ 44\ 14\ -96\ -24\ 1\ -63\ -47\ -26\ 65\ -87\ -5\ 53\ 40\ 63\ 86\ 49\ -52\ -82\ -50\ 14\ 72\ 61\ -88\ 18\ 46\ 16\ 33\ 10\ 43\ -6\ 5\ -80\ -97\ 52\ -34\ 32\ -79\ -94\ 37\ 89\ 43\ -82\ -41\ -33\ 75\ 35\ 48\ 7\ 6\ -4\ -82\ 90\ 54\ 88\ -55\ -13\ 84\ -93\ -13\ 88\ 47\ 47\ -33\ -42\ -19\ 74\ -67\ -7\ 56\ 96\ -68\ -35\ -83\ 59\ 15\ 57\ 1\ -83\ 53\ 43\ -94\ 68\ 60\ 60\ 24\ -37\ 25\ 34\ 35\ -3\ -94\ -62\ 2\ 23\ 68\ -84\ 98\ 45\ 70\ 72\ 27\ 58\ -23\ 42\ 60\ -45\ -62\ 78\ 23\ -92\ -96\ -47\ -85\ 81\ -88\ 10\ -41\ 77\ 50\ 37\ 65\ -31\ 100\ -41\ 34\ -56\ 70\ -97\ 3\ -24\ -70\ -93\ -7\ -47\ -29\ -86\ 35\ 63\ -31\ 22\ -76\ 21\ -40\ 20\ -69\ 11\ 35\ -89\ -10\ 39\ 74\ 52\ 4\ 13\ -55\ 46\ -97\ 63\ -19\ -58\ 22\ 16\ -97\ 95\ 68\ -36\ 12\ -61\ -40\ -6\ -87\ 73\ -31\ 80\ 49\ 34\ -9\ 54\ 61\ 2\ -80\ 35\ 27\ -11\ 2\ -99\ -93\ 71\ -64\ -5\ -75\ 93\ 57\ -4\ -94\ 61\ 22\ -50\ 96\ -35\ 22\ -32\ -2\ -19\ -24\ -35\ 60\ -2\ -72\ -70\ 89\ -22\ 91\ 89\ 96\ 94\ 55\ -27\ 15\ 100\ 13\ 13\ 60"
string1<-"-36\ 23\ -35\ 24\ "
string1<-"-36\ 23\ -35\ 24\ -84\ 68\ -37\ -85\ 26\ 21\ 17\ 38\ 12\ -98\ -28\ -17\ -2\ -30\ -55\ -30\ 89\ 40\ 11\ -72\ 87\ -88\ -28\ 87\ 63\ 71\ -51\ 19\ 86\ 73\ -97\ -12\ -46\ 93\ 78\ 10\ 90\ -62\ -5\ -59\ -48\ -80\ 75\ -41\ 14\ -2\ 23\ -32\ -64\ -76\ -82\ -36\ 89\ -28\ -21\ 77\ 87\ 33\ -33\ -97\ 89\ -9\ -51\ -4\ 81\ 42\ 89\ -34\ -55\ -64\ 51\ 68\ -44\ 13\ -80\ 12\ 0\ 23\ -21\ 82\ 22\ 91\ -86\ 78\ -31\ -64\ -56\ 84\ -76\ 27\ 33\ 61\ -95\ -76\ 74\ -46\ -5\ -86\ 51\ -44\ -59\ 66\ 89\ -65\ -42\ -15\ 40\ 61\ -85\ 22\ -11\ -57\ -65\ -25\ -49\ 76\ -44\ -90\ -3\ 53\ -32\ -94\ 63\ -18\ 22\ 91\ 87\ -93\ 66\ -71\ -33\ -49\ 100\ 20\ -77\ -11\ 50\ 55\ -70\ 49\ -61\ 14\ 42\ -73\ 94\ 35\ -28\ 53\ -19\ 0\ -49\ 87\ 48\ -15\ -23\ 33\ -50\ -8\ 32\ -71\ 93\ 5\ -46\ 32\ 75\ -51\ -43\ 12\ -65\ 81\ 9\ -36\ 53\ 69\ 84\ -49\ 100\ -42\ -74\ 95\ -16\ -70\ -41\ -84\ -44\ -88\ 78\ -62\ -19\ -60\ 23\ 25\ -74\ -26\ -46\ 8\ 15\ -47\ 10\ 23\ -25\ 78\ 44\ -65\ -16\ -41\ -40\ -36\ -5\ 10\ 11\ 68\ 19\ 35\ 66\ -38\ 12\ -23\ -86\ -9\ 27\ -29\ -76\ 93\ -50\ -30\ 71\ -43\ 84\ 32\ -30\ -92\ 61\ -31\ 55\ -65\ -10\ -49\ 61\ 7\ -73\ -99\ -90\ 62\ -35\ -95\ 43\ 76\ -75\ 26\ 57\ -91\ 86\ 82\ 68\ 92\ 92\ 52\ -20\ 79\ -93\ 4\ 63\ 82\ -1\ 67\ -83\ 29\ 62\ -47\ 82\ 44\ 8\ -31\ 25\ 57\ -8\ -82\ -57\ -64\ 82\ 86\ 89\ -95\ 67\ 37\ 52\ 68\ -8\ -23\ -27\ 93\ 3\ -40\ 71\ -36\ -88\ 14\ 78\ 84\ -31\ -89\ -96\ -74\ 14\ -51\ 49\ -59\ 39\ 54\ -45\ 46\ 22\ 53\ 71\ 71\ 99\ 84\ 87\ -44\ -26\ 4\ -68\ 91\ 11\ -19\ -76\ 68\ -100\ 0\ 66\ 82\ -98\ 28\ 33\ 49\ 58\ -14\ -78\ 85\ 48\ -82\ 44\ -7\ -81\ 21\ 95\ -25\ 18\ -53\ -75\ -26\ -57\ 44\ 52\ 77\ 40\ -65\ -94\ 54\ -16\ -30\ 46\ 4\ -28\ 80\ 94\ -44\ -34\ -60\ -21\ 17\ -19\ 28\ 96\ -20\ 100\ 87\ 27\ -63\ -33\ 1\ -42\ 26\ -83\ -70\ -47\ -60\ 48\ 61\ -87\ -97\ -61\ 35\ 75\ 16\ -2\ 15\ 65\ 14\ 34\ -66\ -74\ 35\ 33\ -13\ 24\ -34\ 50\ -68\ -99\ 31\ 65\ 32\ -76\ -7\ 47\ -46\ -46\ -42\ -22\ -67\ -87\ -23\ 99\ 4\ -94\ 10\ -26\ -10\ 75\ -40\ -60\ 37\ 26\ "
string1<-"-36\ 23\ -35\ 24\ -84\ 68\ -37\ -85\ 26\ 21\ 17\ 38\ 12\ -98\ -28\ -17\ -2\ -30\ -55\ -30\ 89\ 40\ 11\ -72\ 87\ -88\ -28\ 87\ 63\ 71\ -51\ 19\ 86\ 73\ -97\ -12\ -46\ 93\ 78\ 10\ 90\ -62\ -5\ -59\ -48\ -80\ 75\ -41\ 14\ -2\ 23\ -32\ -64\ -76\ -82\ -36\ 89\ -28\ -21\ 77\ 87\ 33\ -33\ -97\ 89\ -9\ -51\ -4\ 81\ 42\ 89\ -34\ -55\ -64\ 51\ 68\ -44\ 13\ -80\ 12\ 0\ 23\ -21\ 82\ 22\ 91\ -86\ 78\ -31\ -64\ -56\ 84\ -76\ 27\ 33\ 61\ -95\ -76\ 74\ -46\ -5\ -86\ 51\ -44\ -59\ 66\ 89\ -65\ -42\ -15\ 40\ 61\ -85\ 22\ -11\ -57\ -65\ -25\ -49\ 76\ -44\ -90\ -3\ 53\ -32\ -94\ 63\ -18\ 22\ 91\ 87\ -93\ 66\ -71\ -33\ -49\ 100\ 20\ -77\ -11\ 50\ 55\ -70\ 49\ -61\ 14\ 42\ -73\ 94\ 35\ -28\ 53\ -19\ 0\ -49\ 87\ 48\ -15\ -23\ 33\ -50\ -8\ 32\ -71\ 93\ 5\ -46\ 32\ 75\ -51\ -43\ 12\ -65\ 81\ 9\ -36\ 53\ 69\ 84\ -49\ 100\ -42\ -74\ 95\ -16\ -70\ -41\ -84\ -44\ -88\ 78\ -62\ -19\ -60\ 23\ 25\ -74\ -26\ -46\ 8\ 15\ -47\ 10\ 23\ -25\ 78\ 44\ -65\ -16\ -41\ -40\ -36\ -5\ 10\ 11\ 68\ 19\ 35\ 66\ -38\ 12\ -23\ -86\ -9\ 27\ -29\ -76\ 93\ -50\ -30\ 71\ -43\ 84\ 32\ -30\ -92\ 61\ -31\ 55\ -65\ -10\ -49\ 61\ 7\ -73\ -99\ -90\ 62\ -35\ -95\ 43\ 76\ -75\ 26\ 57\ -91\ 86\ 82\ 68\ 92\ 92\ 52\ -20\ 79\ -93\ 4\ 63\ 82\ -1\ 67\ -83\ 29\ 62\ -47\ 82\ 44\ 8\ -31\ 25\ 57\ -8\ -82\ -57\ -64\ 82\ 86\ 89\ -95\ 67\ 37\ 52\ 68\ -8\ -23\ -27\ 93\ 3\ -40\ 71\ -36\ -88\ 14\ 78\ 84\ -31\ -89\ -96\ -74\ 14\ -51\ 49\ -59\ 39\ 54\ -45\ 46\ 22\ 53\ 71\ 71\ 99\ 84\ 87\ -44\ -26\ 4\ -68\ 91\ 11\ -19\ -76\ 68\ -100\ 0\ 66\ 82\ -98\ 28\ 33\ 49\ 58\ -14\ -78\ 85\ 48\ -82\ 44\ -7\ -81\ 21\ 95\ -25\ 18\ -53\ -75\ -26\ -57\ 44\ 52\ 77\ 40\ -65\ -94\ 54\ -16\ -30\ 46\ 4\ -28\ 80\ 94\ -44\ -34\ -60\ -21\ 17\ -19\ 28\ 96\ -20\ 100\ 87\ 27\ -63\ -33\ 1\ -42\ 26\ -83\ -70\ -47\ -60\ 48\ 61\ -87\ -97\ -61\ 35\ 75\ 16\ -2\ 15\ 65\ 14\ 34\ -66\ -74\ 35\ 33\ -13\ 24\ -34\ 50\ -68\ -99\ 31\ 65\ 32\ -76\ -7\ 47\ -46\ -46\ -42\ -22\ -67\ -87\ -23\ 99\ 4\ -94\ 10\ -26\ -10\ 75\ -40\ -60\ 37\ 26\
-70\ -70\ -81\ 72\ -49\ 48\ -8\ 42\ -8\ -10\ -29\ -100\ 95\ -42\ 48\"
installed.packages()
install.packages("RSQLite")
setwd("/home/gaozheng/Teaching/Stats406/R_scripts/lab4/")
list.files()
drv=dbDriver("SQLite")
library("RSQLite")
drv=dbDriver("SQLite")
conn=dbConnect(drv,"Test.db")
dbDisconnect(conn)
dbUnloadDriver(drv)
?"dbDriver"
?dbListTables
dbListTables(conn)
drv = dbDriver("SQLite")
conn = dbConnect(drv,"Test.db")
dbListTables(conn)
class(conn)
attributes(conn)
dbListResults(conn)
dbListFields(conn)
dbListTables(conn)
dbListFields(conn,dbListTables(conn))
?"dbListFields"
sqltext="SELECT * FROM emissions;";
sqltext
dt1=dbGetQuery(conn,sqltext)
dt1
?"dbGetQuery"
class(dt1)
sqltext="SELECT country, val_2001 FROM emissions;";
dt2=dbGetQuery(conn,sqltext);
dt2
dt1
dt1
sqltext="SELECT country, round(val_2001,3) AS v_2001,round(val_2006,3) AS v_2006 FROM emissions;"
dt3=dbGetQuery(conn,sqltext);
dt3
sqltext="SELECT country, round(val_2001,3) AS v_2001,
round(val_2006,3) AS v_2006 FROM emissions WHERE
country IN (’\"United States\"’, ’\"China\"’,
’\"Brazil\"’, ’\"Egypt\"’);"
sqltext
dt3=dbGetQuery(conn,sqltext);
sqltext="SELECT country, round(val_2001,3) AS v_2001,
round(val_2006,3) AS v_2006 FROM emissions WHERE
country IN ('\"United States\"', '\"China\"',
'\"Brazil\"', '\"Egypt\"');"
dt3=dbGetQuery(conn,sqltext);
dt3
sqltext="SELECT country, round(val_2001,3), AS v_2001,
round(val_2006,3) AS v_2006 FROM emissions WHERE
country LIKE '\"U%';"
dt3=dbGetQuery(conn,sqltext);
sqltext="SELECT country, round(val_2001,3) AS v_2001,
round(val_2006,3) AS v_2006 FROM emissions WHERE
country LIKE '\"U%';"
dt3=dbGetQuery(conn,sqltext);
dt3
sqltext="SELECT country, round(val_2001,3) AS v_2001,
round(val_2006,3) AS v_2006 FROM emissions WHERE
country LIKE '\"(U|B)%';"
dt3=dbGetQuery(conn,sqltext);
dt3
sqltext="SELECT country, round(val_2001,3) AS v_2001,
round(val_2006,3) AS v_2006 FROM emissions WHERE
country LIKE '\"U|B%';"
dt3=dbGetQuery(conn,sqltext);
dt3
sqltext="SELECT country, round(val_2001,3) AS v_2001,
round(val_2006,3) AS v_2006 FROM emissions WHERE
country LIKE '\"U%';"
dt3=dbGetQuery(conn,sqltext);
dt3
dbDisconnect(conn)
dbUnloadDriver(drv)
drv=dbDriver("SQLite")
conn=dbConnect(drv,"baseball.db")
dbListTables(conn)
dbListFields(conn,"Master")
dbListFields(conn,"Salaries")
dbDisconnect(conn)
dbUnloadDriver(drv)
drv = dbDriver("SQLite")
conn = dbConnect(drv,"Test.db")
ex_sqltext = "SELECT country, val_2001, val_2006 FROM emissions WHERE (country LIKE '\"U%' OR country LIKE '\"B%') AND ( val_2001 > val_2006 );"
dtex_2 = dbGetQuery(conn,ex_sqltext)
dtex_2
dbDisconnect(conn)
dbUnloadDriver(drv)
conn=dbConnect(drv,"baseball.db")
dbListTables(conn)
sqltext = "SELECT yearID,
SUM(HR) as total_HR FROM Teams GROUP BY yearID;"
dt4=dbGetQuery(conn,sqltext)
dt4
plot(dt4[,1],dt4[,2],xlab='Years',
ylab='Number of HRs',type='b',col='blue')
sqltext = "SELECT yearID, HR FROM Teams GROUP BY yearID;"
dt3=dbGetQuery(conn,sqltext)
dt3
sqltext = "SELECT yearID, HR FROM Teams;"
dt3=dbGetQuery(conn,sqltext)
dt3
sqltext = "SELECT yearID, HR FROM Teams GROUP BY yearID;"
dt3=dbGetQuery(conn,sqltext)
dt3
dbListFields(conn,"Teams")
sqltext = "SELECT yearID, sum(HR) as total_HR, 0.5*sum(G)
as total_G from Teams GROUP BY yearID";
dt5=dbGetQuery(conn, sqltext)
plot(dt5[,1],dt5[,2]/dt5[,3],xlab='Years',
ylab='Number of HRs',type='b',col='blue')
dt7 = dbGetQuery(
conn, "SELECT college,
count(playerID) as total_players from Master WHERE
birthYear> 1950 GROUP BY college
HAVING total_players > 10"
)
dt7
dt7 = dbGetQuery(
conn, "SELECT college,
count(playerID) as total_players from Master WHERE
birthYear> 1950 GROUP BY college
"
)
dt7
dt7 = dbGetQuery(
conn, "SELECT college,
count(playerID) as total_players from Master WHERE
birthYear> 1950
HAVING total_players > 10"
)
dt7 = dbGetQuery(
conn, "SELECT college,
count(playerID) as total_players from Master WHERE
birthYear> 1950 "
)
dt7
dt7 = dbGetQuery(
conn, "SELECT college,
count(playerID) as total_players from Master WHERE
birthYear > 1950 GROUP BY college
HAVING total_players > 10"
)
dt7
dt7 = dbGetQuery(
conn, "SELECT college,
count(playerID) as total_players from Master WHERE
birthYear > 1950 GROUP BY college
HAVING total_players > 10
ORDER BY total_players"
)
dt7
dt7 = dbGetQuery(
conn, "SELECT college,
count(playerID) as total_players from Master WHERE
birthYear > 1950 GROUP BY college
HAVING total_players > 10
ORDER BY total_players DESC"
)
dt7
